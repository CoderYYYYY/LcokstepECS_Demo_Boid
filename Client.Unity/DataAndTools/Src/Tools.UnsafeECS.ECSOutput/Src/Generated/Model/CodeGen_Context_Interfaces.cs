
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {  
    using Lockstep.Game;
    public unsafe partial class Context : BaseContext {
        public int CurTotalEntityCount => _entities.CurTotalEntityCount;
        public int CurBoidSpawnerCount => _entities.CurBoidSpawnerCount;
        public int MaxBoidSpawnerIndex => _entities.MaxBoidSpawnerIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidSpawner* GetBoidSpawner(int index) { return _entities.GetBoidSpawner(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidSpawner* GetBoidSpawner(EntityRef entityRef) {  return _entities.GetBoidSpawner(entityRef); }
        public int CurBoidCellCount => _entities.CurBoidCellCount;
        public int MaxBoidCellIndex => _entities.MaxBoidCellIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidCell* GetBoidCell(int index) { return _entities.GetBoidCell(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidCell* GetBoidCell(EntityRef entityRef) {  return _entities.GetBoidCell(entityRef); }
        public int CurBoidCount => _entities.CurBoidCount;
        public int MaxBoidIndex => _entities.MaxBoidIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Boid* GetBoid(int index) { return _entities.GetBoid(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Boid* GetBoid(EntityRef entityRef) {  return _entities.GetBoid(entityRef); }
        public int CurBoidTargetCount => _entities.CurBoidTargetCount;
        public int MaxBoidTargetIndex => _entities.MaxBoidTargetIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidTarget* GetBoidTarget(int index) { return _entities.GetBoidTarget(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidTarget* GetBoidTarget(EntityRef entityRef) {  return _entities.GetBoidTarget(entityRef); }
        public int CurBoidObstacleCount => _entities.CurBoidObstacleCount;
        public int MaxBoidObstacleIndex => _entities.MaxBoidObstacleIndex;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidObstacle* GetBoidObstacle(int index) { return _entities.GetBoidObstacle(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidObstacle* GetBoidObstacle(EntityRef entityRef) {  return _entities.GetBoidObstacle(entityRef); } 

    #region GetComponetFilter
        public void GetAllBoidSpawner_Transform(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<BoidSpawner> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidSpawnerAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Transform); } });
        }
        public void GetAllBoidSpawner_Prefab(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Prefab> compArray, FuncEntityFilter<BoidSpawner> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidSpawnerAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Prefab); } });
        }
        public void GetAllBoidSpawner_Spawn(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<SpawnData> compArray, FuncEntityFilter<BoidSpawner> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidSpawnerAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Spawn); } });
        }
        public void GetAllBoidSpawner_BoidPrefab(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<AssetData> compArray, FuncEntityFilter<BoidSpawner> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidSpawnerAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->BoidPrefab); } });
        }
        public void GetAllBoidSpawner_Tag(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BoidSpawnerTag> compArray, FuncEntityFilter<BoidSpawner> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidSpawnerAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Tag); } });
        } 
        public void GetAllBoidCell_Cell(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<CellData> compArray, FuncEntityFilter<BoidCell> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidCellAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Cell); } });
        } 
        public void GetAllBoid_Transform(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<Boid> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Transform); } });
        }
        public void GetAllBoid_Prefab(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Prefab> compArray, FuncEntityFilter<Boid> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Prefab); } });
        }
        public void GetAllBoid_State(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BoidState> compArray, FuncEntityFilter<Boid> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->State); } });
        }
        public void GetAllBoid_Tag(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BoidTag> compArray, FuncEntityFilter<Boid> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Tag); } });
        } 
        public void GetAllBoidTarget_Transform(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<BoidTarget> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidTargetAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Transform); } });
        }
        public void GetAllBoidTarget_Prefab(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Prefab> compArray, FuncEntityFilter<BoidTarget> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidTargetAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Prefab); } });
        }
        public void GetAllBoidTarget_MoveInfo(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<TargetMoveInfo> compArray, FuncEntityFilter<BoidTarget> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidTargetAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->MoveInfo); } });
        }
        public void GetAllBoidTarget_Tag(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BoidTargetTag> compArray, FuncEntityFilter<BoidTarget> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidTargetAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Tag); } });
        } 
        public void GetAllBoidObstacle_Transform(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Transform3D> compArray, FuncEntityFilter<BoidObstacle> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidObstacleAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Transform); } });
        }
        public void GetAllBoidObstacle_Prefab(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<Prefab> compArray, FuncEntityFilter<BoidObstacle> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidObstacleAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Prefab); } });
        }
        public void GetAllBoidObstacle_Player(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<PlayerData> compArray, FuncEntityFilter<BoidObstacle> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidObstacleAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Player); } });
        }
        public void GetAllBoidObstacle_Skill(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<SkillData> compArray, FuncEntityFilter<BoidObstacle> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidObstacleAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Skill); } });
        }
        public void GetAllBoidObstacle_Move(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<MoveData> compArray, FuncEntityFilter<BoidObstacle> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidObstacleAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Move); } });
        }
        public void GetAllBoidObstacle_Tag(EAllocatorType allocatorType, out NativeArray<EntityRef> entityAry,
            out NativeArray<BoidObstacleTag> compArray, FuncEntityFilter<BoidObstacle> filterFunc){
            _FilterEntity(allocatorType,_entities._BoidObstacleAry._EntityAry,out entityAry,out compArray,filterFunc,
             (elst,clst,p)=>{ if (p->IsActive && filterFunc(p)) { elst.Add(p->EntityRef);clst.Add(p->Tag); } });
        }   
        public NativeArray<Animator> GetAllAnimator(EAllocatorType allocatorType,E_EntityOfAnimator entity){ var val = _entities.GetAllAnimator(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Animator> GetAllAnimator(EAllocatorType allocatorType,E_EntityOfAnimator entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimator(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<CollisionAgent> GetAllCollisionAgent(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){ var val = _entities.GetAllCollisionAgent(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<CollisionAgent> GetAllCollisionAgent(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<NavMeshAgent> GetAllNavMeshAgent(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity){ var val = _entities.GetAllNavMeshAgent(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<NavMeshAgent> GetAllNavMeshAgent(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllNavMeshAgent(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<Prefab> GetAllPrefab(EAllocatorType allocatorType,E_EntityOfPrefab entity){ var val = _entities.GetAllPrefab(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Prefab> GetAllPrefab(EAllocatorType allocatorType,E_EntityOfPrefab entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPrefab(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<Transform2D> GetAllTransform2D(EAllocatorType allocatorType,E_EntityOfTransform2D entity){ var val = _entities.GetAllTransform2D(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Transform2D> GetAllTransform2D(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<Transform3D> GetAllTransform3D(EAllocatorType allocatorType,E_EntityOfTransform3D entity){ var val = _entities.GetAllTransform3D(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<Transform3D> GetAllTransform3D(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<BoidSpawnerTag> GetAllBoidSpawnerTag(EAllocatorType allocatorType,E_EntityOfBoidSpawnerTag entity){ var val = _entities.GetAllBoidSpawnerTag(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<BoidSpawnerTag> GetAllBoidSpawnerTag(EAllocatorType allocatorType,E_EntityOfBoidSpawnerTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidSpawnerTag(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<BoidTag> GetAllBoidTag(EAllocatorType allocatorType,E_EntityOfBoidTag entity){ var val = _entities.GetAllBoidTag(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<BoidTag> GetAllBoidTag(EAllocatorType allocatorType,E_EntityOfBoidTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidTag(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<BoidObstacleTag> GetAllBoidObstacleTag(EAllocatorType allocatorType,E_EntityOfBoidObstacleTag entity){ var val = _entities.GetAllBoidObstacleTag(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<BoidObstacleTag> GetAllBoidObstacleTag(EAllocatorType allocatorType,E_EntityOfBoidObstacleTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidObstacleTag(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<BoidTargetTag> GetAllBoidTargetTag(EAllocatorType allocatorType,E_EntityOfBoidTargetTag entity){ var val = _entities.GetAllBoidTargetTag(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<BoidTargetTag> GetAllBoidTargetTag(EAllocatorType allocatorType,E_EntityOfBoidTargetTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidTargetTag(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<TargetMoveInfo> GetAllTargetMoveInfo(EAllocatorType allocatorType,E_EntityOfTargetMoveInfo entity){ var val = _entities.GetAllTargetMoveInfo(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<TargetMoveInfo> GetAllTargetMoveInfo(EAllocatorType allocatorType,E_EntityOfTargetMoveInfo entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTargetMoveInfo(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<BoidState> GetAllBoidState(EAllocatorType allocatorType,E_EntityOfBoidState entity){ var val = _entities.GetAllBoidState(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<BoidState> GetAllBoidState(EAllocatorType allocatorType,E_EntityOfBoidState entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidState(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<ViewData> GetAllViewData(EAllocatorType allocatorType,E_EntityOfViewData entity){ var val = _entities.GetAllViewData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<ViewData> GetAllViewData(EAllocatorType allocatorType,E_EntityOfViewData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllViewData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<SpawnData> GetAllSpawnData(EAllocatorType allocatorType,E_EntityOfSpawnData entity){ var val = _entities.GetAllSpawnData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<SpawnData> GetAllSpawnData(EAllocatorType allocatorType,E_EntityOfSpawnData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSpawnData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<AssetData> GetAllAssetData(EAllocatorType allocatorType,E_EntityOfAssetData entity){ var val = _entities.GetAllAssetData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<AssetData> GetAllAssetData(EAllocatorType allocatorType,E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAssetData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<CellIndexData> GetAllCellIndexData(EAllocatorType allocatorType,E_EntityOfCellIndexData entity){ var val = _entities.GetAllCellIndexData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<CellIndexData> GetAllCellIndexData(EAllocatorType allocatorType,E_EntityOfCellIndexData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCellIndexData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<ScaleData> GetAllScaleData(EAllocatorType allocatorType,E_EntityOfScaleData entity){ var val = _entities.GetAllScaleData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<ScaleData> GetAllScaleData(EAllocatorType allocatorType,E_EntityOfScaleData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllScaleData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<PlayerData> GetAllPlayerData(EAllocatorType allocatorType,E_EntityOfPlayerData entity){ var val = _entities.GetAllPlayerData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<PlayerData> GetAllPlayerData(EAllocatorType allocatorType,E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPlayerData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<SkillData> GetAllSkillData(EAllocatorType allocatorType,E_EntityOfSkillData entity){ var val = _entities.GetAllSkillData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<SkillData> GetAllSkillData(EAllocatorType allocatorType,E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSkillData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<MoveData> GetAllMoveData(EAllocatorType allocatorType,E_EntityOfMoveData entity){ var val = _entities.GetAllMoveData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<MoveData> GetAllMoveData(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}
        public NativeArray<CellData> GetAllCellData(EAllocatorType allocatorType,E_EntityOfCellData entity){ var val = _entities.GetAllCellData(entity);_RegisterAry(allocatorType,ref val); return val;}
        public NativeArray<CellData> GetAllCellData(EAllocatorType allocatorType,E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCellData(entity,filterFunc,out length); _RegisterAry(allocatorType,ref val);; return val;}

        public NativeArray<int> GetAllAnimator_Pad(EAllocatorType allocatorType,E_EntityOfAnimator entity){var val = _entities.GetAllAnimator_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAnimator_Pad(EAllocatorType allocatorType,E_EntityOfAnimator entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAnimator_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<CollisionShape> GetAllCollisionAgent_Collider(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Collider(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<CollisionShape> GetAllCollisionAgent_Collider(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Collider(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsTrigger(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_IsTrigger(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsTrigger(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_IsTrigger(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCollisionAgent_Layer(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Layer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCollisionAgent_Layer(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Layer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsEnable(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_IsEnable(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsEnable(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_IsEnable(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsSleep(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_IsSleep(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllCollisionAgent_IsSleep(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_IsSleep(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllCollisionAgent_Mass(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Mass(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllCollisionAgent_Mass(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Mass(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllCollisionAgent_AngularSpeed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_AngularSpeed(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllCollisionAgent_AngularSpeed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_AngularSpeed(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllCollisionAgent_Speed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity){var val = _entities.GetAllCollisionAgent_Speed(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllCollisionAgent_Speed(EAllocatorType allocatorType,E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCollisionAgent_Speed(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllNavMeshAgent_Pad(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity){var val = _entities.GetAllNavMeshAgent_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllNavMeshAgent_Pad(EAllocatorType allocatorType,E_EntityOfNavMeshAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllNavMeshAgent_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPrefab_AssetId(EAllocatorType allocatorType,E_EntityOfPrefab entity){var val = _entities.GetAllPrefab_AssetId(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPrefab_AssetId(EAllocatorType allocatorType,E_EntityOfPrefab entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPrefab_AssetId(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector2> GetAllTransform2D_Position(EAllocatorType allocatorType,E_EntityOfTransform2D entity){var val = _entities.GetAllTransform2D_Position(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector2> GetAllTransform2D_Position(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D_Position(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform2D_Deg(EAllocatorType allocatorType,E_EntityOfTransform2D entity){var val = _entities.GetAllTransform2D_Deg(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform2D_Deg(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D_Deg(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform2D_Scale(EAllocatorType allocatorType,E_EntityOfTransform2D entity){var val = _entities.GetAllTransform2D_Scale(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform2D_Scale(EAllocatorType allocatorType,E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform2D_Scale(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllTransform3D_Position(EAllocatorType allocatorType,E_EntityOfTransform3D entity){var val = _entities.GetAllTransform3D_Position(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllTransform3D_Position(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D_Position(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllTransform3D_Forward(EAllocatorType allocatorType,E_EntityOfTransform3D entity){var val = _entities.GetAllTransform3D_Forward(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllTransform3D_Forward(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D_Forward(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform3D_Scale(EAllocatorType allocatorType,E_EntityOfTransform3D entity){var val = _entities.GetAllTransform3D_Scale(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTransform3D_Scale(EAllocatorType allocatorType,E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTransform3D_Scale(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBoidSpawnerTag_Pad(EAllocatorType allocatorType,E_EntityOfBoidSpawnerTag entity){var val = _entities.GetAllBoidSpawnerTag_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBoidSpawnerTag_Pad(EAllocatorType allocatorType,E_EntityOfBoidSpawnerTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidSpawnerTag_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBoidTag_Pad(EAllocatorType allocatorType,E_EntityOfBoidTag entity){var val = _entities.GetAllBoidTag_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBoidTag_Pad(EAllocatorType allocatorType,E_EntityOfBoidTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidTag_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBoidObstacleTag_Pad(EAllocatorType allocatorType,E_EntityOfBoidObstacleTag entity){var val = _entities.GetAllBoidObstacleTag_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBoidObstacleTag_Pad(EAllocatorType allocatorType,E_EntityOfBoidObstacleTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidObstacleTag_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBoidTargetTag_Pad(EAllocatorType allocatorType,E_EntityOfBoidTargetTag entity){var val = _entities.GetAllBoidTargetTag_Pad(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllBoidTargetTag_Pad(EAllocatorType allocatorType,E_EntityOfBoidTargetTag entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidTargetTag_Pad(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllTargetMoveInfo_InitPos(EAllocatorType allocatorType,E_EntityOfTargetMoveInfo entity){var val = _entities.GetAllTargetMoveInfo_InitPos(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllTargetMoveInfo_InitPos(EAllocatorType allocatorType,E_EntityOfTargetMoveInfo entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTargetMoveInfo_InitPos(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTargetMoveInfo_Interval(EAllocatorType allocatorType,E_EntityOfTargetMoveInfo entity){var val = _entities.GetAllTargetMoveInfo_Interval(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTargetMoveInfo_Interval(EAllocatorType allocatorType,E_EntityOfTargetMoveInfo entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTargetMoveInfo_Interval(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTargetMoveInfo_Radius(EAllocatorType allocatorType,E_EntityOfTargetMoveInfo entity){var val = _entities.GetAllTargetMoveInfo_Radius(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTargetMoveInfo_Radius(EAllocatorType allocatorType,E_EntityOfTargetMoveInfo entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTargetMoveInfo_Radius(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTargetMoveInfo_InitDeg(EAllocatorType allocatorType,E_EntityOfTargetMoveInfo entity){var val = _entities.GetAllTargetMoveInfo_InitDeg(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllTargetMoveInfo_InitDeg(EAllocatorType allocatorType,E_EntityOfTargetMoveInfo entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllTargetMoveInfo_InitDeg(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllBoidState_SinkTimer(EAllocatorType allocatorType,E_EntityOfBoidState entity){var val = _entities.GetAllBoidState_SinkTimer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllBoidState_SinkTimer(EAllocatorType allocatorType,E_EntityOfBoidState entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidState_SinkTimer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllBoidState_IsDied(EAllocatorType allocatorType,E_EntityOfBoidState entity){var val = _entities.GetAllBoidState_IsDied(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllBoidState_IsDied(EAllocatorType allocatorType,E_EntityOfBoidState entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidState_IsDied(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllBoidState_IsScored(EAllocatorType allocatorType,E_EntityOfBoidState entity){var val = _entities.GetAllBoidState_IsScored(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllBoidState_IsScored(EAllocatorType allocatorType,E_EntityOfBoidState entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidState_IsScored(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<EntityRef> GetAllBoidState_Killer(EAllocatorType allocatorType,E_EntityOfBoidState entity){var val = _entities.GetAllBoidState_Killer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<EntityRef> GetAllBoidState_Killer(EAllocatorType allocatorType,E_EntityOfBoidState entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllBoidState_Killer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllViewData_ViewId(EAllocatorType allocatorType,E_EntityOfViewData entity){var val = _entities.GetAllViewData_ViewId(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllViewData_ViewId(EAllocatorType allocatorType,E_EntityOfViewData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllViewData_ViewId(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllSpawnData_Count(EAllocatorType allocatorType,E_EntityOfSpawnData entity){var val = _entities.GetAllSpawnData_Count(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllSpawnData_Count(EAllocatorType allocatorType,E_EntityOfSpawnData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSpawnData_Count(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSpawnData_Radius(EAllocatorType allocatorType,E_EntityOfSpawnData entity){var val = _entities.GetAllSpawnData_Radius(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSpawnData_Radius(EAllocatorType allocatorType,E_EntityOfSpawnData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSpawnData_Radius(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllSpawnData_Position(EAllocatorType allocatorType,E_EntityOfSpawnData entity){var val = _entities.GetAllSpawnData_Position(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllSpawnData_Position(EAllocatorType allocatorType,E_EntityOfSpawnData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSpawnData_Position(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAssetData_AssetId(EAllocatorType allocatorType,E_EntityOfAssetData entity){var val = _entities.GetAllAssetData_AssetId(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllAssetData_AssetId(EAllocatorType allocatorType,E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllAssetData_AssetId(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCellIndexData_Index(EAllocatorType allocatorType,E_EntityOfCellIndexData entity){var val = _entities.GetAllCellIndexData_Index(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCellIndexData_Index(EAllocatorType allocatorType,E_EntityOfCellIndexData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCellIndexData_Index(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllScaleData_Value(EAllocatorType allocatorType,E_EntityOfScaleData entity){var val = _entities.GetAllScaleData_Value(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllScaleData_Value(EAllocatorType allocatorType,E_EntityOfScaleData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllScaleData_Value(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPlayerData_Score(EAllocatorType allocatorType,E_EntityOfPlayerData entity){var val = _entities.GetAllPlayerData_Score(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPlayerData_Score(EAllocatorType allocatorType,E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPlayerData_Score(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPlayerData_LocalId(EAllocatorType allocatorType,E_EntityOfPlayerData entity){var val = _entities.GetAllPlayerData_LocalId(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllPlayerData_LocalId(EAllocatorType allocatorType,E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllPlayerData_LocalId(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllSkillData_IsNeedFire(EAllocatorType allocatorType,E_EntityOfSkillData entity){var val = _entities.GetAllSkillData_IsNeedFire(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllSkillData_IsNeedFire(EAllocatorType allocatorType,E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSkillData_IsNeedFire(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllSkillData_IsFiring(EAllocatorType allocatorType,E_EntityOfSkillData entity){var val = _entities.GetAllSkillData_IsFiring(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<bool> GetAllSkillData_IsFiring(EAllocatorType allocatorType,E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSkillData_IsFiring(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSkillData_CD(EAllocatorType allocatorType,E_EntityOfSkillData entity){var val = _entities.GetAllSkillData_CD(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSkillData_CD(EAllocatorType allocatorType,E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSkillData_CD(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSkillData_CdTimer(EAllocatorType allocatorType,E_EntityOfSkillData entity){var val = _entities.GetAllSkillData_CdTimer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSkillData_CdTimer(EAllocatorType allocatorType,E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSkillData_CdTimer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSkillData_Duration(EAllocatorType allocatorType,E_EntityOfSkillData entity){var val = _entities.GetAllSkillData_Duration(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSkillData_Duration(EAllocatorType allocatorType,E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSkillData_Duration(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSkillData_DurationTimer(EAllocatorType allocatorType,E_EntityOfSkillData entity){var val = _entities.GetAllSkillData_DurationTimer(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSkillData_DurationTimer(EAllocatorType allocatorType,E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSkillData_DurationTimer(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSkillData_AtkRange(EAllocatorType allocatorType,E_EntityOfSkillData entity){var val = _entities.GetAllSkillData_AtkRange(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllSkillData_AtkRange(EAllocatorType allocatorType,E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllSkillData_AtkRange(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_MoveSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity){var val = _entities.GetAllMoveData_MoveSpd(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_MoveSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData_MoveSpd(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_AcceleratedSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity){var val = _entities.GetAllMoveData_AcceleratedSpd(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_AcceleratedSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData_AcceleratedSpd(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_CurSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity){var val = _entities.GetAllMoveData_CurSpd(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_CurSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData_CurSpd(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_AngularSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity){var val = _entities.GetAllMoveData_AngularSpd(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_AngularSpd(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData_AngularSpd(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_DeltaDeg(EAllocatorType allocatorType,E_EntityOfMoveData entity){var val = _entities.GetAllMoveData_DeltaDeg(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllMoveData_DeltaDeg(EAllocatorType allocatorType,E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllMoveData_DeltaDeg(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCellData_Count(EAllocatorType allocatorType,E_EntityOfCellData entity){var val = _entities.GetAllCellData_Count(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCellData_Count(EAllocatorType allocatorType,E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCellData_Count(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllCellData_Alignment(EAllocatorType allocatorType,E_EntityOfCellData entity){var val = _entities.GetAllCellData_Alignment(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllCellData_Alignment(EAllocatorType allocatorType,E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCellData_Alignment(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllCellData_Separation(EAllocatorType allocatorType,E_EntityOfCellData entity){var val = _entities.GetAllCellData_Separation(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LVector3> GetAllCellData_Separation(EAllocatorType allocatorType,E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCellData_Separation(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllCellData_ObstacleDistance(EAllocatorType allocatorType,E_EntityOfCellData entity){var val = _entities.GetAllCellData_ObstacleDistance(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<LFloat> GetAllCellData_ObstacleDistance(EAllocatorType allocatorType,E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCellData_ObstacleDistance(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCellData_ObstaclePositionIndex(EAllocatorType allocatorType,E_EntityOfCellData entity){var val = _entities.GetAllCellData_ObstaclePositionIndex(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCellData_ObstaclePositionIndex(EAllocatorType allocatorType,E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCellData_ObstaclePositionIndex(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCellData_TargetPositionIndex(EAllocatorType allocatorType,E_EntityOfCellData entity){var val = _entities.GetAllCellData_TargetPositionIndex(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCellData_TargetPositionIndex(EAllocatorType allocatorType,E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCellData_TargetPositionIndex(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCellData_Index(EAllocatorType allocatorType,E_EntityOfCellData entity){var val = _entities.GetAllCellData_Index(entity);_RegisterAry(allocatorType,ref val);; return val; }
        public NativeArray<int> GetAllCellData_Index(EAllocatorType allocatorType,E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){var val = _entities.GetAllCellData_Index(entity,filterFunc,out length);_RegisterAry(allocatorType,ref val);; return val; }
 
    #endregion

    }
}                                                                                
                                                                                         