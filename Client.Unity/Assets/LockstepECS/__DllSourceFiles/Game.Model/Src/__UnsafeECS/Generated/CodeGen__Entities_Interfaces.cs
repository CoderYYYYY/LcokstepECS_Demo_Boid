
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {  
    public unsafe partial class _EntityManager {
        internal NativeEntityArray<BoidSpawner> _BoidSpawnerAry;
        internal NativeEntityArray<BoidCell> _BoidCellAry;
        internal NativeEntityArray<Boid> _BoidAry;
        internal NativeEntityArray<BoidTarget> _BoidTargetAry;
        internal NativeEntityArray<BoidObstacle> _BoidObstacleAry; 
        internal unsafe void Alloc(){
            _BoidSpawnerAry.Alloc((int)EEntityType.BoidSpawner,BoidSpawner.INIT_COUNT);
            _BoidCellAry.Alloc((int)EEntityType.BoidCell,BoidCell.INIT_COUNT);
            _BoidAry.Alloc((int)EEntityType.Boid,Boid.INIT_COUNT);
            _BoidTargetAry.Alloc((int)EEntityType.BoidTarget,BoidTarget.INIT_COUNT);
            _BoidObstacleAry.Alloc((int)EEntityType.BoidObstacle,BoidObstacle.INIT_COUNT); 
        }
        internal unsafe void Free(){
            _BoidSpawnerAry.Free();
            _BoidCellAry.Free();
            _BoidAry.Free();
            _BoidTargetAry.Free();
            _BoidObstacleAry.Free(); 
        }
        internal _EntityManager Clone(){
            var ret = new _EntityManager();
            CopyTo(ret);
            return ret;
        }
        internal void CopyTo(_EntityManager dst){
            _BoidSpawnerAry.CopyTo(ref dst._BoidSpawnerAry);
            _BoidCellAry.CopyTo(ref dst._BoidCellAry);
            _BoidAry.CopyTo(ref dst._BoidAry);
            _BoidTargetAry.CopyTo(ref dst._BoidTargetAry);
            _BoidObstacleAry.CopyTo(ref dst._BoidObstacleAry); 
        }

        internal unsafe BoidSpawner* CreateTempBoidSpawner(Context context) {
            return _BoidSpawnerAry.CreateTempEntity(context);
        }
        internal unsafe BoidSpawner* GetTempBoidSpawner(int idx) {
            return _BoidSpawnerAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBoidSpawnerAry(){
            if (_BoidSpawnerAry._WaitCreateCount > 0) {
                var len = _BoidSpawnerAry._WaitCreateCount;
                var ptr = _BoidSpawnerAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = _DefaultDefine.BoidSpawner;
                    ptr->_entity._ref._type = (int)EEntityType.BoidSpawner;
                }
                _BoidSpawnerAry._WaitCreateCount = 0;
            }
        }
        internal unsafe BoidCell* CreateTempBoidCell(Context context) {
            return _BoidCellAry.CreateTempEntity(context);
        }
        internal unsafe BoidCell* GetTempBoidCell(int idx) {
            return _BoidCellAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBoidCellAry(){
            if (_BoidCellAry._WaitCreateCount > 0) {
                var len = _BoidCellAry._WaitCreateCount;
                var ptr = _BoidCellAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = _DefaultDefine.BoidCell;
                    ptr->_entity._ref._type = (int)EEntityType.BoidCell;
                }
                _BoidCellAry._WaitCreateCount = 0;
            }
        }
        internal unsafe Boid* CreateTempBoid(Context context) {
            return _BoidAry.CreateTempEntity(context);
        }
        internal unsafe Boid* GetTempBoid(int idx) {
            return _BoidAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBoidAry(){
            if (_BoidAry._WaitCreateCount > 0) {
                var len = _BoidAry._WaitCreateCount;
                var ptr = _BoidAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = _DefaultDefine.Boid;
                    ptr->_entity._ref._type = (int)EEntityType.Boid;
                }
                _BoidAry._WaitCreateCount = 0;
            }
        }
        internal unsafe BoidTarget* CreateTempBoidTarget(Context context) {
            return _BoidTargetAry.CreateTempEntity(context);
        }
        internal unsafe BoidTarget* GetTempBoidTarget(int idx) {
            return _BoidTargetAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBoidTargetAry(){
            if (_BoidTargetAry._WaitCreateCount > 0) {
                var len = _BoidTargetAry._WaitCreateCount;
                var ptr = _BoidTargetAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = _DefaultDefine.BoidTarget;
                    ptr->_entity._ref._type = (int)EEntityType.BoidTarget;
                }
                _BoidTargetAry._WaitCreateCount = 0;
            }
        }
        internal unsafe BoidObstacle* CreateTempBoidObstacle(Context context) {
            return _BoidObstacleAry.CreateTempEntity(context);
        }
        internal unsafe BoidObstacle* GetTempBoidObstacle(int idx) {
            return _BoidObstacleAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBoidObstacleAry(){
            if (_BoidObstacleAry._WaitCreateCount > 0) {
                var len = _BoidObstacleAry._WaitCreateCount;
                var ptr = _BoidObstacleAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = _DefaultDefine.BoidObstacle;
                    ptr->_entity._ref._type = (int)EEntityType.BoidObstacle;
                }
                _BoidObstacleAry._WaitCreateCount = 0;
            }
        } 

        internal NativeArray<int> GetAllAnimator_Pad(E_EntityOfAnimator entity){
            switch(entity){

            }
            return new NativeArray<int>();
        }
        internal NativeArray<CollisionShape> GetAllCollisionAgent_Collider(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<CollisionShape>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsTrigger(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<bool>();
        }
        internal NativeArray<int> GetAllCollisionAgent_Layer(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<int>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsEnable(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<bool>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsSleep(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<bool>();
        }
        internal NativeArray<LFloat> GetAllCollisionAgent_Mass(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllCollisionAgent_AngularSpeed(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LVector3> GetAllCollisionAgent_Speed(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<int> GetAllNavMeshAgent_Pad(E_EntityOfNavMeshAgent entity){
            switch(entity){

            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllPrefab_AssetId(E_EntityOfPrefab entity){
            switch(entity){
                case E_EntityOfPrefab.BoidSpawner: return _GetAllBoidSpawner_Prefab<int>(_GetOffsetOfPrefab_AssetId()); break;
                case E_EntityOfPrefab.Boid: return _GetAllBoid_Prefab<int>(_GetOffsetOfPrefab_AssetId()); break;
                case E_EntityOfPrefab.BoidTarget: return _GetAllBoidTarget_Prefab<int>(_GetOffsetOfPrefab_AssetId()); break;
                case E_EntityOfPrefab.BoidObstacle: return _GetAllBoidObstacle_Prefab<int>(_GetOffsetOfPrefab_AssetId()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<LVector2> GetAllTransform2D_Position(E_EntityOfTransform2D entity){
            switch(entity){

            }
            return new NativeArray<LVector2>();
        }
        internal NativeArray<LFloat> GetAllTransform2D_Deg(E_EntityOfTransform2D entity){
            switch(entity){

            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllTransform2D_Scale(E_EntityOfTransform2D entity){
            switch(entity){

            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LVector3> GetAllTransform3D_Position(E_EntityOfTransform3D entity){
            switch(entity){
                case E_EntityOfTransform3D.BoidSpawner: return _GetAllBoidSpawner_Transform3D<LVector3>(_GetOffsetOfTransform3D_Position()); break;
                case E_EntityOfTransform3D.Boid: return _GetAllBoid_Transform3D<LVector3>(_GetOffsetOfTransform3D_Position()); break;
                case E_EntityOfTransform3D.BoidTarget: return _GetAllBoidTarget_Transform3D<LVector3>(_GetOffsetOfTransform3D_Position()); break;
                case E_EntityOfTransform3D.BoidObstacle: return _GetAllBoidObstacle_Transform3D<LVector3>(_GetOffsetOfTransform3D_Position()); break;
            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<LVector3> GetAllTransform3D_Forward(E_EntityOfTransform3D entity){
            switch(entity){
                case E_EntityOfTransform3D.BoidSpawner: return _GetAllBoidSpawner_Transform3D<LVector3>(_GetOffsetOfTransform3D_Forward()); break;
                case E_EntityOfTransform3D.Boid: return _GetAllBoid_Transform3D<LVector3>(_GetOffsetOfTransform3D_Forward()); break;
                case E_EntityOfTransform3D.BoidTarget: return _GetAllBoidTarget_Transform3D<LVector3>(_GetOffsetOfTransform3D_Forward()); break;
                case E_EntityOfTransform3D.BoidObstacle: return _GetAllBoidObstacle_Transform3D<LVector3>(_GetOffsetOfTransform3D_Forward()); break;
            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<LFloat> GetAllTransform3D_Scale(E_EntityOfTransform3D entity){
            switch(entity){
                case E_EntityOfTransform3D.BoidSpawner: return _GetAllBoidSpawner_Transform3D<LFloat>(_GetOffsetOfTransform3D_Scale()); break;
                case E_EntityOfTransform3D.Boid: return _GetAllBoid_Transform3D<LFloat>(_GetOffsetOfTransform3D_Scale()); break;
                case E_EntityOfTransform3D.BoidTarget: return _GetAllBoidTarget_Transform3D<LFloat>(_GetOffsetOfTransform3D_Scale()); break;
                case E_EntityOfTransform3D.BoidObstacle: return _GetAllBoidObstacle_Transform3D<LFloat>(_GetOffsetOfTransform3D_Scale()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<int> GetAllBoidSpawnerTag_Pad(E_EntityOfBoidSpawnerTag entity){
            switch(entity){
                case E_EntityOfBoidSpawnerTag.BoidSpawner: return _GetAllBoidSpawner_BoidSpawnerTag<int>(_GetOffsetOfBoidSpawnerTag_Pad()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllBoidTag_Pad(E_EntityOfBoidTag entity){
            switch(entity){
                case E_EntityOfBoidTag.Boid: return _GetAllBoid_BoidTag<int>(_GetOffsetOfBoidTag_Pad()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllBoidObstacleTag_Pad(E_EntityOfBoidObstacleTag entity){
            switch(entity){
                case E_EntityOfBoidObstacleTag.BoidObstacle: return _GetAllBoidObstacle_BoidObstacleTag<int>(_GetOffsetOfBoidObstacleTag_Pad()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllBoidTargetTag_Pad(E_EntityOfBoidTargetTag entity){
            switch(entity){
                case E_EntityOfBoidTargetTag.BoidTarget: return _GetAllBoidTarget_BoidTargetTag<int>(_GetOffsetOfBoidTargetTag_Pad()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<LVector3> GetAllTargetMoveInfo_InitPos(E_EntityOfTargetMoveInfo entity){
            switch(entity){
                case E_EntityOfTargetMoveInfo.BoidTarget: return _GetAllBoidTarget_TargetMoveInfo<LVector3>(_GetOffsetOfTargetMoveInfo_InitPos()); break;
            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<LFloat> GetAllTargetMoveInfo_Interval(E_EntityOfTargetMoveInfo entity){
            switch(entity){
                case E_EntityOfTargetMoveInfo.BoidTarget: return _GetAllBoidTarget_TargetMoveInfo<LFloat>(_GetOffsetOfTargetMoveInfo_Interval()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllTargetMoveInfo_Radius(E_EntityOfTargetMoveInfo entity){
            switch(entity){
                case E_EntityOfTargetMoveInfo.BoidTarget: return _GetAllBoidTarget_TargetMoveInfo<LFloat>(_GetOffsetOfTargetMoveInfo_Radius()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllTargetMoveInfo_InitDeg(E_EntityOfTargetMoveInfo entity){
            switch(entity){
                case E_EntityOfTargetMoveInfo.BoidTarget: return _GetAllBoidTarget_TargetMoveInfo<LFloat>(_GetOffsetOfTargetMoveInfo_InitDeg()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllBoidState_SinkTimer(E_EntityOfBoidState entity){
            switch(entity){
                case E_EntityOfBoidState.Boid: return _GetAllBoid_BoidState<LFloat>(_GetOffsetOfBoidState_SinkTimer()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<bool> GetAllBoidState_IsDied(E_EntityOfBoidState entity){
            switch(entity){
                case E_EntityOfBoidState.Boid: return _GetAllBoid_BoidState<bool>(_GetOffsetOfBoidState_IsDied()); break;
            }
            return new NativeArray<bool>();
        }
        internal NativeArray<bool> GetAllBoidState_IsScored(E_EntityOfBoidState entity){
            switch(entity){
                case E_EntityOfBoidState.Boid: return _GetAllBoid_BoidState<bool>(_GetOffsetOfBoidState_IsScored()); break;
            }
            return new NativeArray<bool>();
        }
        internal NativeArray<EntityRef> GetAllBoidState_Killer(E_EntityOfBoidState entity){
            switch(entity){
                case E_EntityOfBoidState.Boid: return _GetAllBoid_BoidState<EntityRef>(_GetOffsetOfBoidState_Killer()); break;
            }
            return new NativeArray<EntityRef>();
        }
        internal NativeArray<int> GetAllViewData_ViewId(E_EntityOfViewData entity){
            switch(entity){

            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllSpawnData_Count(E_EntityOfSpawnData entity){
            switch(entity){
                case E_EntityOfSpawnData.BoidSpawner: return _GetAllBoidSpawner_SpawnData<int>(_GetOffsetOfSpawnData_Count()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<LFloat> GetAllSpawnData_Radius(E_EntityOfSpawnData entity){
            switch(entity){
                case E_EntityOfSpawnData.BoidSpawner: return _GetAllBoidSpawner_SpawnData<LFloat>(_GetOffsetOfSpawnData_Radius()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LVector3> GetAllSpawnData_Position(E_EntityOfSpawnData entity){
            switch(entity){
                case E_EntityOfSpawnData.BoidSpawner: return _GetAllBoidSpawner_SpawnData<LVector3>(_GetOffsetOfSpawnData_Position()); break;
            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<int> GetAllAssetData_AssetId(E_EntityOfAssetData entity){
            switch(entity){
                case E_EntityOfAssetData.BoidSpawner: return _GetAllBoidSpawner_AssetData<int>(_GetOffsetOfAssetData_AssetId()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllCellIndexData_Index(E_EntityOfCellIndexData entity){
            switch(entity){

            }
            return new NativeArray<int>();
        }
        internal NativeArray<LVector3> GetAllScaleData_Value(E_EntityOfScaleData entity){
            switch(entity){

            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<int> GetAllPlayerData_Score(E_EntityOfPlayerData entity){
            switch(entity){
                case E_EntityOfPlayerData.BoidObstacle: return _GetAllBoidObstacle_PlayerData<int>(_GetOffsetOfPlayerData_Score()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllPlayerData_LocalId(E_EntityOfPlayerData entity){
            switch(entity){
                case E_EntityOfPlayerData.BoidObstacle: return _GetAllBoidObstacle_PlayerData<int>(_GetOffsetOfPlayerData_LocalId()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<bool> GetAllSkillData_IsNeedFire(E_EntityOfSkillData entity){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<bool>(_GetOffsetOfSkillData_IsNeedFire()); break;
            }
            return new NativeArray<bool>();
        }
        internal NativeArray<bool> GetAllSkillData_IsFiring(E_EntityOfSkillData entity){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<bool>(_GetOffsetOfSkillData_IsFiring()); break;
            }
            return new NativeArray<bool>();
        }
        internal NativeArray<LFloat> GetAllSkillData_CD(E_EntityOfSkillData entity){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<LFloat>(_GetOffsetOfSkillData_CD()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllSkillData_CdTimer(E_EntityOfSkillData entity){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<LFloat>(_GetOffsetOfSkillData_CdTimer()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllSkillData_Duration(E_EntityOfSkillData entity){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<LFloat>(_GetOffsetOfSkillData_Duration()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllSkillData_DurationTimer(E_EntityOfSkillData entity){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<LFloat>(_GetOffsetOfSkillData_DurationTimer()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllSkillData_AtkRange(E_EntityOfSkillData entity){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<LFloat>(_GetOffsetOfSkillData_AtkRange()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_MoveSpd(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<LFloat>(_GetOffsetOfMoveData_MoveSpd()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_AcceleratedSpd(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<LFloat>(_GetOffsetOfMoveData_AcceleratedSpd()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_CurSpd(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<LFloat>(_GetOffsetOfMoveData_CurSpd()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_AngularSpd(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<LFloat>(_GetOffsetOfMoveData_AngularSpd()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_DeltaDeg(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<LFloat>(_GetOffsetOfMoveData_DeltaDeg()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<int> GetAllCellData_Count(E_EntityOfCellData entity){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<int>(_GetOffsetOfCellData_Count()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<LVector3> GetAllCellData_Alignment(E_EntityOfCellData entity){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<LVector3>(_GetOffsetOfCellData_Alignment()); break;
            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<LVector3> GetAllCellData_Separation(E_EntityOfCellData entity){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<LVector3>(_GetOffsetOfCellData_Separation()); break;
            }
            return new NativeArray<LVector3>();
        }
        internal NativeArray<LFloat> GetAllCellData_ObstacleDistance(E_EntityOfCellData entity){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<LFloat>(_GetOffsetOfCellData_ObstacleDistance()); break;
            }
            return new NativeArray<LFloat>();
        }
        internal NativeArray<int> GetAllCellData_ObstaclePositionIndex(E_EntityOfCellData entity){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<int>(_GetOffsetOfCellData_ObstaclePositionIndex()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllCellData_TargetPositionIndex(E_EntityOfCellData entity){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<int>(_GetOffsetOfCellData_TargetPositionIndex()); break;
            }
            return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllCellData_Index(E_EntityOfCellData entity){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<int>(_GetOffsetOfCellData_Index()); break;
            }
            return new NativeArray<int>();
        }

        internal NativeArray<int> GetAllAnimator_Pad(E_EntityOfAnimator entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<CollisionShape> GetAllCollisionAgent_Collider(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<CollisionShape>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsTrigger(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<bool>();
        }
        internal NativeArray<int> GetAllCollisionAgent_Layer(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsEnable(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<bool>();
        }
        internal NativeArray<bool> GetAllCollisionAgent_IsSleep(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<bool>();
        }
        internal NativeArray<LFloat> GetAllCollisionAgent_Mass(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllCollisionAgent_AngularSpeed(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LVector3> GetAllCollisionAgent_Speed(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<int> GetAllNavMeshAgent_Pad(E_EntityOfNavMeshAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllPrefab_AssetId(E_EntityOfPrefab entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPrefab.BoidSpawner: return _GetAllBoidSpawner_Prefab<int>(_GetOffsetOfPrefab_AssetId(),filterFunc,out length); break;
                case E_EntityOfPrefab.Boid: return _GetAllBoid_Prefab<int>(_GetOffsetOfPrefab_AssetId(),filterFunc,out length); break;
                case E_EntityOfPrefab.BoidTarget: return _GetAllBoidTarget_Prefab<int>(_GetOffsetOfPrefab_AssetId(),filterFunc,out length); break;
                case E_EntityOfPrefab.BoidObstacle: return _GetAllBoidObstacle_Prefab<int>(_GetOffsetOfPrefab_AssetId(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<LVector2> GetAllTransform2D_Position(E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LVector2>();
        }
        internal NativeArray<LFloat> GetAllTransform2D_Deg(E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllTransform2D_Scale(E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LVector3> GetAllTransform3D_Position(E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTransform3D.BoidSpawner: return _GetAllBoidSpawner_Transform3D<LVector3>(_GetOffsetOfTransform3D_Position(),filterFunc,out length); break;
                case E_EntityOfTransform3D.Boid: return _GetAllBoid_Transform3D<LVector3>(_GetOffsetOfTransform3D_Position(),filterFunc,out length); break;
                case E_EntityOfTransform3D.BoidTarget: return _GetAllBoidTarget_Transform3D<LVector3>(_GetOffsetOfTransform3D_Position(),filterFunc,out length); break;
                case E_EntityOfTransform3D.BoidObstacle: return _GetAllBoidObstacle_Transform3D<LVector3>(_GetOffsetOfTransform3D_Position(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<LVector3> GetAllTransform3D_Forward(E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTransform3D.BoidSpawner: return _GetAllBoidSpawner_Transform3D<LVector3>(_GetOffsetOfTransform3D_Forward(),filterFunc,out length); break;
                case E_EntityOfTransform3D.Boid: return _GetAllBoid_Transform3D<LVector3>(_GetOffsetOfTransform3D_Forward(),filterFunc,out length); break;
                case E_EntityOfTransform3D.BoidTarget: return _GetAllBoidTarget_Transform3D<LVector3>(_GetOffsetOfTransform3D_Forward(),filterFunc,out length); break;
                case E_EntityOfTransform3D.BoidObstacle: return _GetAllBoidObstacle_Transform3D<LVector3>(_GetOffsetOfTransform3D_Forward(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<LFloat> GetAllTransform3D_Scale(E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTransform3D.BoidSpawner: return _GetAllBoidSpawner_Transform3D<LFloat>(_GetOffsetOfTransform3D_Scale(),filterFunc,out length); break;
                case E_EntityOfTransform3D.Boid: return _GetAllBoid_Transform3D<LFloat>(_GetOffsetOfTransform3D_Scale(),filterFunc,out length); break;
                case E_EntityOfTransform3D.BoidTarget: return _GetAllBoidTarget_Transform3D<LFloat>(_GetOffsetOfTransform3D_Scale(),filterFunc,out length); break;
                case E_EntityOfTransform3D.BoidObstacle: return _GetAllBoidObstacle_Transform3D<LFloat>(_GetOffsetOfTransform3D_Scale(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<int> GetAllBoidSpawnerTag_Pad(E_EntityOfBoidSpawnerTag entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidSpawnerTag.BoidSpawner: return _GetAllBoidSpawner_BoidSpawnerTag<int>(_GetOffsetOfBoidSpawnerTag_Pad(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllBoidTag_Pad(E_EntityOfBoidTag entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidTag.Boid: return _GetAllBoid_BoidTag<int>(_GetOffsetOfBoidTag_Pad(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllBoidObstacleTag_Pad(E_EntityOfBoidObstacleTag entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidObstacleTag.BoidObstacle: return _GetAllBoidObstacle_BoidObstacleTag<int>(_GetOffsetOfBoidObstacleTag_Pad(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllBoidTargetTag_Pad(E_EntityOfBoidTargetTag entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidTargetTag.BoidTarget: return _GetAllBoidTarget_BoidTargetTag<int>(_GetOffsetOfBoidTargetTag_Pad(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<LVector3> GetAllTargetMoveInfo_InitPos(E_EntityOfTargetMoveInfo entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTargetMoveInfo.BoidTarget: return _GetAllBoidTarget_TargetMoveInfo<LVector3>(_GetOffsetOfTargetMoveInfo_InitPos(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<LFloat> GetAllTargetMoveInfo_Interval(E_EntityOfTargetMoveInfo entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTargetMoveInfo.BoidTarget: return _GetAllBoidTarget_TargetMoveInfo<LFloat>(_GetOffsetOfTargetMoveInfo_Interval(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllTargetMoveInfo_Radius(E_EntityOfTargetMoveInfo entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTargetMoveInfo.BoidTarget: return _GetAllBoidTarget_TargetMoveInfo<LFloat>(_GetOffsetOfTargetMoveInfo_Radius(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllTargetMoveInfo_InitDeg(E_EntityOfTargetMoveInfo entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTargetMoveInfo.BoidTarget: return _GetAllBoidTarget_TargetMoveInfo<LFloat>(_GetOffsetOfTargetMoveInfo_InitDeg(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllBoidState_SinkTimer(E_EntityOfBoidState entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidState.Boid: return _GetAllBoid_BoidState<LFloat>(_GetOffsetOfBoidState_SinkTimer(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<bool> GetAllBoidState_IsDied(E_EntityOfBoidState entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidState.Boid: return _GetAllBoid_BoidState<bool>(_GetOffsetOfBoidState_IsDied(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<bool>();
        }
        internal NativeArray<bool> GetAllBoidState_IsScored(E_EntityOfBoidState entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidState.Boid: return _GetAllBoid_BoidState<bool>(_GetOffsetOfBoidState_IsScored(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<bool>();
        }
        internal NativeArray<EntityRef> GetAllBoidState_Killer(E_EntityOfBoidState entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidState.Boid: return _GetAllBoid_BoidState<EntityRef>(_GetOffsetOfBoidState_Killer(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<EntityRef>();
        }
        internal NativeArray<int> GetAllViewData_ViewId(E_EntityOfViewData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllSpawnData_Count(E_EntityOfSpawnData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSpawnData.BoidSpawner: return _GetAllBoidSpawner_SpawnData<int>(_GetOffsetOfSpawnData_Count(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<LFloat> GetAllSpawnData_Radius(E_EntityOfSpawnData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSpawnData.BoidSpawner: return _GetAllBoidSpawner_SpawnData<LFloat>(_GetOffsetOfSpawnData_Radius(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LVector3> GetAllSpawnData_Position(E_EntityOfSpawnData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSpawnData.BoidSpawner: return _GetAllBoidSpawner_SpawnData<LVector3>(_GetOffsetOfSpawnData_Position(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<int> GetAllAssetData_AssetId(E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfAssetData.BoidSpawner: return _GetAllBoidSpawner_AssetData<int>(_GetOffsetOfAssetData_AssetId(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllCellIndexData_Index(E_EntityOfCellIndexData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<LVector3> GetAllScaleData_Value(E_EntityOfScaleData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<int> GetAllPlayerData_Score(E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPlayerData.BoidObstacle: return _GetAllBoidObstacle_PlayerData<int>(_GetOffsetOfPlayerData_Score(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllPlayerData_LocalId(E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPlayerData.BoidObstacle: return _GetAllBoidObstacle_PlayerData<int>(_GetOffsetOfPlayerData_LocalId(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<bool> GetAllSkillData_IsNeedFire(E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<bool>(_GetOffsetOfSkillData_IsNeedFire(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<bool>();
        }
        internal NativeArray<bool> GetAllSkillData_IsFiring(E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<bool>(_GetOffsetOfSkillData_IsFiring(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<bool>();
        }
        internal NativeArray<LFloat> GetAllSkillData_CD(E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<LFloat>(_GetOffsetOfSkillData_CD(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllSkillData_CdTimer(E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<LFloat>(_GetOffsetOfSkillData_CdTimer(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllSkillData_Duration(E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<LFloat>(_GetOffsetOfSkillData_Duration(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllSkillData_DurationTimer(E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<LFloat>(_GetOffsetOfSkillData_DurationTimer(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllSkillData_AtkRange(E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<LFloat>(_GetOffsetOfSkillData_AtkRange(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_MoveSpd(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<LFloat>(_GetOffsetOfMoveData_MoveSpd(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_AcceleratedSpd(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<LFloat>(_GetOffsetOfMoveData_AcceleratedSpd(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_CurSpd(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<LFloat>(_GetOffsetOfMoveData_CurSpd(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_AngularSpd(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<LFloat>(_GetOffsetOfMoveData_AngularSpd(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<LFloat> GetAllMoveData_DeltaDeg(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<LFloat>(_GetOffsetOfMoveData_DeltaDeg(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<int> GetAllCellData_Count(E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<int>(_GetOffsetOfCellData_Count(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<LVector3> GetAllCellData_Alignment(E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<LVector3>(_GetOffsetOfCellData_Alignment(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<LVector3> GetAllCellData_Separation(E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<LVector3>(_GetOffsetOfCellData_Separation(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LVector3>();
        }
        internal NativeArray<LFloat> GetAllCellData_ObstacleDistance(E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<LFloat>(_GetOffsetOfCellData_ObstacleDistance(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<LFloat>();
        }
        internal NativeArray<int> GetAllCellData_ObstaclePositionIndex(E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<int>(_GetOffsetOfCellData_ObstaclePositionIndex(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllCellData_TargetPositionIndex(E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<int>(_GetOffsetOfCellData_TargetPositionIndex(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }
        internal NativeArray<int> GetAllCellData_Index(E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<int>(_GetOffsetOfCellData_Index(),filterFunc,out length); break;
            }
            length = 0;return new NativeArray<int>();
        }

        internal NativeArray<Animator> GetAllAnimator(E_EntityOfAnimator entity){
            switch(entity){

            }
            return new NativeArray<Animator>();
        }
        internal NativeArray<CollisionAgent> GetAllCollisionAgent(E_EntityOfCollisionAgent entity){
            switch(entity){

            }
            return new NativeArray<CollisionAgent>();
        }
        internal NativeArray<NavMeshAgent> GetAllNavMeshAgent(E_EntityOfNavMeshAgent entity){
            switch(entity){

            }
            return new NativeArray<NavMeshAgent>();
        }
        internal NativeArray<Prefab> GetAllPrefab(E_EntityOfPrefab entity){
            switch(entity){
                case E_EntityOfPrefab.BoidSpawner: return _GetAllBoidSpawner_Prefab<Prefab>(0); break;
                case E_EntityOfPrefab.Boid: return _GetAllBoid_Prefab<Prefab>(0); break;
                case E_EntityOfPrefab.BoidTarget: return _GetAllBoidTarget_Prefab<Prefab>(0); break;
                case E_EntityOfPrefab.BoidObstacle: return _GetAllBoidObstacle_Prefab<Prefab>(0); break;
            }
            return new NativeArray<Prefab>();
        }
        internal NativeArray<Transform2D> GetAllTransform2D(E_EntityOfTransform2D entity){
            switch(entity){

            }
            return new NativeArray<Transform2D>();
        }
        internal NativeArray<Transform3D> GetAllTransform3D(E_EntityOfTransform3D entity){
            switch(entity){
                case E_EntityOfTransform3D.BoidSpawner: return _GetAllBoidSpawner_Transform3D<Transform3D>(0); break;
                case E_EntityOfTransform3D.Boid: return _GetAllBoid_Transform3D<Transform3D>(0); break;
                case E_EntityOfTransform3D.BoidTarget: return _GetAllBoidTarget_Transform3D<Transform3D>(0); break;
                case E_EntityOfTransform3D.BoidObstacle: return _GetAllBoidObstacle_Transform3D<Transform3D>(0); break;
            }
            return new NativeArray<Transform3D>();
        }
        internal NativeArray<BoidSpawnerTag> GetAllBoidSpawnerTag(E_EntityOfBoidSpawnerTag entity){
            switch(entity){
                case E_EntityOfBoidSpawnerTag.BoidSpawner: return _GetAllBoidSpawner_BoidSpawnerTag<BoidSpawnerTag>(0); break;
            }
            return new NativeArray<BoidSpawnerTag>();
        }
        internal NativeArray<BoidTag> GetAllBoidTag(E_EntityOfBoidTag entity){
            switch(entity){
                case E_EntityOfBoidTag.Boid: return _GetAllBoid_BoidTag<BoidTag>(0); break;
            }
            return new NativeArray<BoidTag>();
        }
        internal NativeArray<BoidObstacleTag> GetAllBoidObstacleTag(E_EntityOfBoidObstacleTag entity){
            switch(entity){
                case E_EntityOfBoidObstacleTag.BoidObstacle: return _GetAllBoidObstacle_BoidObstacleTag<BoidObstacleTag>(0); break;
            }
            return new NativeArray<BoidObstacleTag>();
        }
        internal NativeArray<BoidTargetTag> GetAllBoidTargetTag(E_EntityOfBoidTargetTag entity){
            switch(entity){
                case E_EntityOfBoidTargetTag.BoidTarget: return _GetAllBoidTarget_BoidTargetTag<BoidTargetTag>(0); break;
            }
            return new NativeArray<BoidTargetTag>();
        }
        internal NativeArray<TargetMoveInfo> GetAllTargetMoveInfo(E_EntityOfTargetMoveInfo entity){
            switch(entity){
                case E_EntityOfTargetMoveInfo.BoidTarget: return _GetAllBoidTarget_TargetMoveInfo<TargetMoveInfo>(0); break;
            }
            return new NativeArray<TargetMoveInfo>();
        }
        internal NativeArray<BoidState> GetAllBoidState(E_EntityOfBoidState entity){
            switch(entity){
                case E_EntityOfBoidState.Boid: return _GetAllBoid_BoidState<BoidState>(0); break;
            }
            return new NativeArray<BoidState>();
        }
        internal NativeArray<ViewData> GetAllViewData(E_EntityOfViewData entity){
            switch(entity){

            }
            return new NativeArray<ViewData>();
        }
        internal NativeArray<SpawnData> GetAllSpawnData(E_EntityOfSpawnData entity){
            switch(entity){
                case E_EntityOfSpawnData.BoidSpawner: return _GetAllBoidSpawner_SpawnData<SpawnData>(0); break;
            }
            return new NativeArray<SpawnData>();
        }
        internal NativeArray<AssetData> GetAllAssetData(E_EntityOfAssetData entity){
            switch(entity){
                case E_EntityOfAssetData.BoidSpawner: return _GetAllBoidSpawner_AssetData<AssetData>(0); break;
            }
            return new NativeArray<AssetData>();
        }
        internal NativeArray<CellIndexData> GetAllCellIndexData(E_EntityOfCellIndexData entity){
            switch(entity){

            }
            return new NativeArray<CellIndexData>();
        }
        internal NativeArray<ScaleData> GetAllScaleData(E_EntityOfScaleData entity){
            switch(entity){

            }
            return new NativeArray<ScaleData>();
        }
        internal NativeArray<PlayerData> GetAllPlayerData(E_EntityOfPlayerData entity){
            switch(entity){
                case E_EntityOfPlayerData.BoidObstacle: return _GetAllBoidObstacle_PlayerData<PlayerData>(0); break;
            }
            return new NativeArray<PlayerData>();
        }
        internal NativeArray<SkillData> GetAllSkillData(E_EntityOfSkillData entity){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<SkillData>(0); break;
            }
            return new NativeArray<SkillData>();
        }
        internal NativeArray<MoveData> GetAllMoveData(E_EntityOfMoveData entity){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<MoveData>(0); break;
            }
            return new NativeArray<MoveData>();
        }
        internal NativeArray<CellData> GetAllCellData(E_EntityOfCellData entity){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<CellData>(0); break;
            }
            return new NativeArray<CellData>();
        }



        internal NativeArray<Animator> GetAllAnimator(E_EntityOfAnimator entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<Animator>();
        }
        internal NativeArray<CollisionAgent> GetAllCollisionAgent(E_EntityOfCollisionAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<CollisionAgent>();
        }
        internal NativeArray<NavMeshAgent> GetAllNavMeshAgent(E_EntityOfNavMeshAgent entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<NavMeshAgent>();
        }
        internal NativeArray<Prefab> GetAllPrefab(E_EntityOfPrefab entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPrefab.BoidSpawner: return _GetAllBoidSpawner_Prefab<Prefab>(0,filterFunc,out length); break;
                case E_EntityOfPrefab.Boid: return _GetAllBoid_Prefab<Prefab>(0,filterFunc,out length); break;
                case E_EntityOfPrefab.BoidTarget: return _GetAllBoidTarget_Prefab<Prefab>(0,filterFunc,out length); break;
                case E_EntityOfPrefab.BoidObstacle: return _GetAllBoidObstacle_Prefab<Prefab>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<Prefab>();
        }
        internal NativeArray<Transform2D> GetAllTransform2D(E_EntityOfTransform2D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<Transform2D>();
        }
        internal NativeArray<Transform3D> GetAllTransform3D(E_EntityOfTransform3D entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTransform3D.BoidSpawner: return _GetAllBoidSpawner_Transform3D<Transform3D>(0,filterFunc,out length); break;
                case E_EntityOfTransform3D.Boid: return _GetAllBoid_Transform3D<Transform3D>(0,filterFunc,out length); break;
                case E_EntityOfTransform3D.BoidTarget: return _GetAllBoidTarget_Transform3D<Transform3D>(0,filterFunc,out length); break;
                case E_EntityOfTransform3D.BoidObstacle: return _GetAllBoidObstacle_Transform3D<Transform3D>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<Transform3D>();
        }
        internal NativeArray<BoidSpawnerTag> GetAllBoidSpawnerTag(E_EntityOfBoidSpawnerTag entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidSpawnerTag.BoidSpawner: return _GetAllBoidSpawner_BoidSpawnerTag<BoidSpawnerTag>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<BoidSpawnerTag>();
        }
        internal NativeArray<BoidTag> GetAllBoidTag(E_EntityOfBoidTag entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidTag.Boid: return _GetAllBoid_BoidTag<BoidTag>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<BoidTag>();
        }
        internal NativeArray<BoidObstacleTag> GetAllBoidObstacleTag(E_EntityOfBoidObstacleTag entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidObstacleTag.BoidObstacle: return _GetAllBoidObstacle_BoidObstacleTag<BoidObstacleTag>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<BoidObstacleTag>();
        }
        internal NativeArray<BoidTargetTag> GetAllBoidTargetTag(E_EntityOfBoidTargetTag entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidTargetTag.BoidTarget: return _GetAllBoidTarget_BoidTargetTag<BoidTargetTag>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<BoidTargetTag>();
        }
        internal NativeArray<TargetMoveInfo> GetAllTargetMoveInfo(E_EntityOfTargetMoveInfo entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfTargetMoveInfo.BoidTarget: return _GetAllBoidTarget_TargetMoveInfo<TargetMoveInfo>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<TargetMoveInfo>();
        }
        internal NativeArray<BoidState> GetAllBoidState(E_EntityOfBoidState entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfBoidState.Boid: return _GetAllBoid_BoidState<BoidState>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<BoidState>();
        }
        internal NativeArray<ViewData> GetAllViewData(E_EntityOfViewData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<ViewData>();
        }
        internal NativeArray<SpawnData> GetAllSpawnData(E_EntityOfSpawnData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSpawnData.BoidSpawner: return _GetAllBoidSpawner_SpawnData<SpawnData>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<SpawnData>();
        }
        internal NativeArray<AssetData> GetAllAssetData(E_EntityOfAssetData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfAssetData.BoidSpawner: return _GetAllBoidSpawner_AssetData<AssetData>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<AssetData>();
        }
        internal NativeArray<CellIndexData> GetAllCellIndexData(E_EntityOfCellIndexData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<CellIndexData>();
        }
        internal NativeArray<ScaleData> GetAllScaleData(E_EntityOfScaleData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){

            }
            length = 0;
            return new NativeArray<ScaleData>();
        }
        internal NativeArray<PlayerData> GetAllPlayerData(E_EntityOfPlayerData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfPlayerData.BoidObstacle: return _GetAllBoidObstacle_PlayerData<PlayerData>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<PlayerData>();
        }
        internal NativeArray<SkillData> GetAllSkillData(E_EntityOfSkillData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfSkillData.BoidObstacle: return _GetAllBoidObstacle_SkillData<SkillData>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<SkillData>();
        }
        internal NativeArray<MoveData> GetAllMoveData(E_EntityOfMoveData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfMoveData.BoidObstacle: return _GetAllBoidObstacle_MoveData<MoveData>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<MoveData>();
        }
        internal NativeArray<CellData> GetAllCellData(E_EntityOfCellData entity,FuncEntityFilter<Entity> filterFunc,out int length){
            switch(entity){
                case E_EntityOfCellData.BoidCell: return _GetAllBoidCell_CellData<CellData>(0,filterFunc,out length); break;
            }
            length = 0;
            return new NativeArray<CellData>();
        }


        internal int CurBoidSpawnerCount => _BoidSpawnerAry.CurEntityCount;
        internal int MaxBoidSpawnerIndex => _BoidSpawnerAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe BoidSpawner* GetBoidSpawner(int index) { return _BoidSpawnerAry.GetEntity(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe BoidSpawner* GetBoidSpawner(EntityRef entityRef){
            var ptr = _BoidSpawnerAry.GetEntity(entityRef._index);
            if (ptr->EntityRef != entityRef) return null;
            return ptr;
        } 
        internal int CurBoidCellCount => _BoidCellAry.CurEntityCount;
        internal int MaxBoidCellIndex => _BoidCellAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe BoidCell* GetBoidCell(int index) { return _BoidCellAry.GetEntity(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe BoidCell* GetBoidCell(EntityRef entityRef){
            var ptr = _BoidCellAry.GetEntity(entityRef._index);
            if (ptr->EntityRef != entityRef) return null;
            return ptr;
        } 
        internal int CurBoidCount => _BoidAry.CurEntityCount;
        internal int MaxBoidIndex => _BoidAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe Boid* GetBoid(int index) { return _BoidAry.GetEntity(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe Boid* GetBoid(EntityRef entityRef){
            var ptr = _BoidAry.GetEntity(entityRef._index);
            if (ptr->EntityRef != entityRef) return null;
            return ptr;
        } 
        internal int CurBoidTargetCount => _BoidTargetAry.CurEntityCount;
        internal int MaxBoidTargetIndex => _BoidTargetAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe BoidTarget* GetBoidTarget(int index) { return _BoidTargetAry.GetEntity(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe BoidTarget* GetBoidTarget(EntityRef entityRef){
            var ptr = _BoidTargetAry.GetEntity(entityRef._index);
            if (ptr->EntityRef != entityRef) return null;
            return ptr;
        } 
        internal int CurBoidObstacleCount => _BoidObstacleAry.CurEntityCount;
        internal int MaxBoidObstacleIndex => _BoidObstacleAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe BoidObstacle* GetBoidObstacle(int index) { return _BoidObstacleAry.GetEntity(index); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal unsafe BoidObstacle* GetBoidObstacle(EntityRef entityRef){
            var ptr = _BoidObstacleAry.GetEntity(entityRef._index);
            if (ptr->EntityRef != entityRef) return null;
            return ptr;
        }  

    }
}                                                                                
                                                                                         