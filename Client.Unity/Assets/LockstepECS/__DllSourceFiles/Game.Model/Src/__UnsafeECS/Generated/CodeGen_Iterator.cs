
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {  
#if true
   public static unsafe class PointerExt {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BoidSpawner* ToBoidSpawnerPtr(this long val){
            #if DEBUG
            if ((val == 0L || ((BoidSpawner*) val)->EntityType != EEntityType.BoidSpawner)) {
                throw new Exception("ToBoidSpawnerPtr error: diff type " + val);
            }
            #endif
            return (BoidSpawner*) val;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BoidCell* ToBoidCellPtr(this long val){
            #if DEBUG
            if ((val == 0L || ((BoidCell*) val)->EntityType != EEntityType.BoidCell)) {
                throw new Exception("ToBoidCellPtr error: diff type " + val);
            }
            #endif
            return (BoidCell*) val;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Boid* ToBoidPtr(this long val){
            #if DEBUG
            if ((val == 0L || ((Boid*) val)->EntityType != EEntityType.Boid)) {
                throw new Exception("ToBoidPtr error: diff type " + val);
            }
            #endif
            return (Boid*) val;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BoidTarget* ToBoidTargetPtr(this long val){
            #if DEBUG
            if ((val == 0L || ((BoidTarget*) val)->EntityType != EEntityType.BoidTarget)) {
                throw new Exception("ToBoidTargetPtr error: diff type " + val);
            }
            #endif
            return (BoidTarget*) val;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BoidObstacle* ToBoidObstaclePtr(this long val){
            #if DEBUG
            if ((val == 0L || ((BoidObstacle*) val)->EntityType != EEntityType.BoidObstacle)) {
                throw new Exception("ToBoidObstaclePtr error: diff type " + val);
            }
            #endif
            return (BoidObstacle*) val;
        } 
    }

    [StructLayoutAttribute(LayoutKind.Sequential, Pack = Define.PackSize)]
    public unsafe partial struct BoidSpawnerIterator : IEnumerator<long>, IEnumerable<long> {
        private Int32 _index;
        private BoidSpawner* _ptr;
        private long _current;
        private int _count;
        public long Current => _current;
        object IEnumerator.Current {
            get { return (object) Current; }
        }
        IEnumerator IEnumerable.GetEnumerator(){
            return this;
        }
        public IEnumerator<long> GetEnumerator(){
            return this;
        }

        public BoidSpawnerIterator(BoidSpawner* ptr,int count){
            _ptr = ptr;
            _index = -1;
            _current = 0;
            _count = count;
        }

        public Boolean MoveNext(){
            while (++_index < _count) {
                if (_ptr[_index]._entity._active) {
                    _current = (long) (&_ptr[_index]);
                    return true;
                }
            }
            _current = 0;
            return false;
        }

        public void Reset(){
            _index = -1;
            _current = 0;
        }
        public void Dispose(){ }
    }
    [StructLayoutAttribute(LayoutKind.Sequential, Pack = Define.PackSize)]
    public unsafe partial struct BoidCellIterator : IEnumerator<long>, IEnumerable<long> {
        private Int32 _index;
        private BoidCell* _ptr;
        private long _current;
        private int _count;
        public long Current => _current;
        object IEnumerator.Current {
            get { return (object) Current; }
        }
        IEnumerator IEnumerable.GetEnumerator(){
            return this;
        }
        public IEnumerator<long> GetEnumerator(){
            return this;
        }

        public BoidCellIterator(BoidCell* ptr,int count){
            _ptr = ptr;
            _index = -1;
            _current = 0;
            _count = count;
        }

        public Boolean MoveNext(){
            while (++_index < _count) {
                if (_ptr[_index]._entity._active) {
                    _current = (long) (&_ptr[_index]);
                    return true;
                }
            }
            _current = 0;
            return false;
        }

        public void Reset(){
            _index = -1;
            _current = 0;
        }
        public void Dispose(){ }
    }
    [StructLayoutAttribute(LayoutKind.Sequential, Pack = Define.PackSize)]
    public unsafe partial struct BoidIterator : IEnumerator<long>, IEnumerable<long> {
        private Int32 _index;
        private Boid* _ptr;
        private long _current;
        private int _count;
        public long Current => _current;
        object IEnumerator.Current {
            get { return (object) Current; }
        }
        IEnumerator IEnumerable.GetEnumerator(){
            return this;
        }
        public IEnumerator<long> GetEnumerator(){
            return this;
        }

        public BoidIterator(Boid* ptr,int count){
            _ptr = ptr;
            _index = -1;
            _current = 0;
            _count = count;
        }

        public Boolean MoveNext(){
            while (++_index < _count) {
                if (_ptr[_index]._entity._active) {
                    _current = (long) (&_ptr[_index]);
                    return true;
                }
            }
            _current = 0;
            return false;
        }

        public void Reset(){
            _index = -1;
            _current = 0;
        }
        public void Dispose(){ }
    }
    [StructLayoutAttribute(LayoutKind.Sequential, Pack = Define.PackSize)]
    public unsafe partial struct BoidTargetIterator : IEnumerator<long>, IEnumerable<long> {
        private Int32 _index;
        private BoidTarget* _ptr;
        private long _current;
        private int _count;
        public long Current => _current;
        object IEnumerator.Current {
            get { return (object) Current; }
        }
        IEnumerator IEnumerable.GetEnumerator(){
            return this;
        }
        public IEnumerator<long> GetEnumerator(){
            return this;
        }

        public BoidTargetIterator(BoidTarget* ptr,int count){
            _ptr = ptr;
            _index = -1;
            _current = 0;
            _count = count;
        }

        public Boolean MoveNext(){
            while (++_index < _count) {
                if (_ptr[_index]._entity._active) {
                    _current = (long) (&_ptr[_index]);
                    return true;
                }
            }
            _current = 0;
            return false;
        }

        public void Reset(){
            _index = -1;
            _current = 0;
        }
        public void Dispose(){ }
    }
    [StructLayoutAttribute(LayoutKind.Sequential, Pack = Define.PackSize)]
    public unsafe partial struct BoidObstacleIterator : IEnumerator<long>, IEnumerable<long> {
        private Int32 _index;
        private BoidObstacle* _ptr;
        private long _current;
        private int _count;
        public long Current => _current;
        object IEnumerator.Current {
            get { return (object) Current; }
        }
        IEnumerator IEnumerable.GetEnumerator(){
            return this;
        }
        public IEnumerator<long> GetEnumerator(){
            return this;
        }

        public BoidObstacleIterator(BoidObstacle* ptr,int count){
            _ptr = ptr;
            _index = -1;
            _current = 0;
            _count = count;
        }

        public Boolean MoveNext(){
            while (++_index < _count) {
                if (_ptr[_index]._entity._active) {
                    _current = (long) (&_ptr[_index]);
                    return true;
                }
            }
            _current = 0;
            return false;
        }

        public void Reset(){
            _index = -1;
            _current = 0;
        }
        public void Dispose(){ }
    } 

#endif
}
                                                                                
                                                                                         