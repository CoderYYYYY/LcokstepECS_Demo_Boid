
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {  

    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct BoidSpawnerTag {
        public int Pad; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Pad.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct BoidTag {
        public int Pad; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Pad.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct BoidObstacleTag {
        public int Pad; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Pad.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct BoidTargetTag {
        public int Pad; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Pad.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct TargetMoveInfo {
        public LVector3 InitPos;
        public LFloat Interval;
        public LFloat Radius;
        public LFloat InitDeg; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +InitPos.GetHashCode();
                hash = hash * 37 +Interval.GetHashCode();
                hash = hash * 37 +Radius.GetHashCode();
                hash = hash * 37 +InitDeg.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct BoidState {
        public LFloat SinkTimer;
        public bool IsDied;
        public bool IsScored;
        public EntityRef Killer; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +SinkTimer.GetHashCode();
                hash = hash * 37 +IsDied.GetHashCode();
                hash = hash * 37 +IsScored.GetHashCode();
                hash = hash * 37 +Killer.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct ViewData {
        public int ViewId; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +ViewId.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct SpawnData {
        public int Count;
        public LFloat Radius;
        public LVector3 Position; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Count.GetHashCode();
                hash = hash * 37 +Radius.GetHashCode();
                hash = hash * 37 +Position.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct AssetData {
        public int AssetId; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +AssetId.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct CellIndexData {
        public int Index; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Index.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct ScaleData {
        public LVector3 Value; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Value.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct PlayerData {
        public int Score;
        public int LocalId; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Score.GetHashCode();
                hash = hash * 37 +LocalId.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct SkillData {
        public bool IsNeedFire;
        public bool IsFiring;
        public LFloat CD;
        public LFloat CdTimer;
        public LFloat Duration;
        public LFloat DurationTimer;
        public LFloat AtkRange; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +IsNeedFire.GetHashCode();
                hash = hash * 37 +IsFiring.GetHashCode();
                hash = hash * 37 +CD.GetHashCode();
                hash = hash * 37 +CdTimer.GetHashCode();
                hash = hash * 37 +Duration.GetHashCode();
                hash = hash * 37 +DurationTimer.GetHashCode();
                hash = hash * 37 +AtkRange.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct MoveData {
        public LFloat MoveSpd;
        public LFloat AcceleratedSpd;
        public LFloat CurSpd;
        public LFloat AngularSpd;
        public LFloat DeltaDeg; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +MoveSpd.GetHashCode();
                hash = hash * 37 +AcceleratedSpd.GetHashCode();
                hash = hash * 37 +CurSpd.GetHashCode();
                hash = hash * 37 +AngularSpd.GetHashCode();
                hash = hash * 37 +DeltaDeg.GetHashCode();  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    [System.Serializable]
    public unsafe partial struct CellData {
        public int Count;
        public LVector3 Alignment;
        public LVector3 Separation;
        public LFloat ObstacleDistance;
        public int ObstaclePositionIndex;
        public int TargetPositionIndex;
        public int Index; 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Count.GetHashCode();
                hash = hash * 37 +Alignment.GetHashCode();
                hash = hash * 37 +Separation.GetHashCode();
                hash = hash * 37 +ObstacleDistance.GetHashCode();
                hash = hash * 37 +ObstaclePositionIndex.GetHashCode();
                hash = hash * 37 +TargetPositionIndex.GetHashCode();
                hash = hash * 37 +Index.GetHashCode();  
                return hash;
            }
        }
    }  
}                                                                                
                                                                                         