
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {                                                              
#if !DONT_USE_GENERATE_CODE                                                                      

    public unsafe partial class Context : BaseContext {
        private static Context _instance;
        public static Context Instance {
            get => _instance ?? (_instance = new Context());
            set => _instance = value;
        }

        public __global* _global;
        public __entities _entities = new __entities();
        public IEntityService _entityService;

    #region Rollback Implement
        private StructBackupHelper<__global> _globalBackuper = new StructBackupHelper<__global>();
        private ClassBackupHelper<__entities> _entitiesBackuper = new ClassBackupHelper<__entities>();

        protected override void DoBackup(int tick){
            _globalBackuper.Value = *_global;
            _globalBackuper.Backup(tick);
            _entitiesBackuper.Backup(tick, _entities.Clone());
        }

        protected override void DoRollbackTo(int tick, int missFrameTick, bool isNeedClear){
            _globalBackuper.RollbackTo(tick, missFrameTick, isNeedClear);
            *_global = _globalBackuper.Value;
            var clone = _entitiesBackuper.RollbackTo(tick, missFrameTick, isNeedClear);
            clone.CopyTo(_entities);
        }

        protected override void DoCleanUselessSnapshot(int checkedTick){
            _globalBackuper.CleanUselessSnapshot(checkedTick);
            _entitiesBackuper.CleanUselessSnapshot(checkedTick,(es)=>es.Free());
        }
    #endregion
    #region Lifecycle
        private FuncOnEntityCreated<BoidSpawner> funcOnCreateEntityBoidSpawner;
        private FuncOnEntityCreated<BoidSpawner> funcResetEntityBoidSpawner;
        private FuncOnEntityCreated<BoidCell> funcOnCreateEntityBoidCell;
        private FuncOnEntityCreated<BoidCell> funcResetEntityBoidCell;
        private FuncOnEntityCreated<Boid> funcOnCreateEntityBoid;
        private FuncOnEntityCreated<Boid> funcResetEntityBoid;
        private FuncOnEntityCreated<BoidTarget> funcOnCreateEntityBoidTarget;
        private FuncOnEntityCreated<BoidTarget> funcResetEntityBoidTarget;
        private FuncOnEntityCreated<BoidObstacle> funcOnCreateEntityBoidObstacle;
        private FuncOnEntityCreated<BoidObstacle> funcResetEntityBoidObstacle;
        private FuncOnEntityCreated<Item> funcOnCreateEntityItem;
        private FuncOnEntityCreated<Item> funcResetEntityItem;
        private FuncOnEntityCreated<Camp> funcOnCreateEntityCamp;
        private FuncOnEntityCreated<Camp> funcResetEntityCamp;
        private FuncOnEntityCreated<Player> funcOnCreateEntityPlayer;
        private FuncOnEntityCreated<Player> funcResetEntityPlayer;
        private FuncOnEntityCreated<Enemy> funcOnCreateEntityEnemy;
        private FuncOnEntityCreated<Enemy> funcResetEntityEnemy;
        private FuncOnEntityCreated<Bullet> funcOnCreateEntityBullet;
        private FuncOnEntityCreated<Bullet> funcResetEntityBullet;
        private FuncOnEntityCreated<Spawner> funcOnCreateEntitySpawner;
        private FuncOnEntityCreated<Spawner> funcResetEntitySpawner;
 
 

        protected override void DoAlloc(){            
            RegisterSystemFunctions();
            _global = (__global*) NativeUtil.Alloc(sizeof(__global)).ToPointer();
            NativeUtil.Zero((Byte*) _global, sizeof(__global));
            _entities.Alloc();
            // reduce gc
            funcOnCreateEntityBoidSpawner = OnEntityCreatedBoidSpawner;
            funcResetEntityBoidSpawner = ResetEntityBoidSpawner;
            funcOnCreateEntityBoidCell = OnEntityCreatedBoidCell;
            funcResetEntityBoidCell = ResetEntityBoidCell;
            funcOnCreateEntityBoid = OnEntityCreatedBoid;
            funcResetEntityBoid = ResetEntityBoid;
            funcOnCreateEntityBoidTarget = OnEntityCreatedBoidTarget;
            funcResetEntityBoidTarget = ResetEntityBoidTarget;
            funcOnCreateEntityBoidObstacle = OnEntityCreatedBoidObstacle;
            funcResetEntityBoidObstacle = ResetEntityBoidObstacle;
            funcOnCreateEntityItem = OnEntityCreatedItem;
            funcResetEntityItem = ResetEntityItem;
            funcOnCreateEntityCamp = OnEntityCreatedCamp;
            funcResetEntityCamp = ResetEntityCamp;
            funcOnCreateEntityPlayer = OnEntityCreatedPlayer;
            funcResetEntityPlayer = ResetEntityPlayer;
            funcOnCreateEntityEnemy = OnEntityCreatedEnemy;
            funcResetEntityEnemy = ResetEntityEnemy;
            funcOnCreateEntityBullet = OnEntityCreatedBullet;
            funcResetEntityBullet = ResetEntityBullet;
            funcOnCreateEntitySpawner = OnEntityCreatedSpawner;
            funcResetEntitySpawner = ResetEntitySpawner;
 
        }
        protected override void DoDestroy(){
            OnDestroy();
            NativeUtil.Free(new IntPtr(_global));
            _entities.Free();
        }
        protected override void DoDestroyEntity(EntityRef entityRef){
            DestroyEntityInternal(GetEntity(entityRef));
        }

        public Entity* GetEntity(EntityRef entityRef){
            switch (entityRef._type) {
                case EntityIds.BoidSpawner: return (Entity*) GetBoidSpawner(entityRef);
                case EntityIds.BoidCell: return (Entity*) GetBoidCell(entityRef);
                case EntityIds.Boid: return (Entity*) GetBoid(entityRef);
                case EntityIds.BoidTarget: return (Entity*) GetBoidTarget(entityRef);
                case EntityIds.BoidObstacle: return (Entity*) GetBoidObstacle(entityRef);
                case EntityIds.Item: return (Entity*) GetItem(entityRef);
                case EntityIds.Camp: return (Entity*) GetCamp(entityRef);
                case EntityIds.Player: return (Entity*) GetPlayer(entityRef);
                case EntityIds.Enemy: return (Entity*) GetEnemy(entityRef);
                case EntityIds.Bullet: return (Entity*) GetBullet(entityRef);
                case EntityIds.Spawner: return (Entity*) GetSpawner(entityRef);
 
            }
            return null;
        }

        private void DestroyEntityInternal(Entity* entity){
            if (entity == null) {
                return;
            }

            if (entity->_active == false) {
                return;
            }

            switch (entity->_ref._type) {
                case EntityIds.BoidSpawner:
                    DestroyBoidSpawnerInternal((BoidSpawner*) entity);
                    break;
                case EntityIds.BoidCell:
                    DestroyBoidCellInternal((BoidCell*) entity);
                    break;
                case EntityIds.Boid:
                    DestroyBoidInternal((Boid*) entity);
                    break;
                case EntityIds.BoidTarget:
                    DestroyBoidTargetInternal((BoidTarget*) entity);
                    break;
                case EntityIds.BoidObstacle:
                    DestroyBoidObstacleInternal((BoidObstacle*) entity);
                    break;
                case EntityIds.Item:
                    DestroyItemInternal((Item*) entity);
                    break;
                case EntityIds.Camp:
                    DestroyCampInternal((Camp*) entity);
                    break;
                case EntityIds.Player:
                    DestroyPlayerInternal((Player*) entity);
                    break;
                case EntityIds.Enemy:
                    DestroyEnemyInternal((Enemy*) entity);
                    break;
                case EntityIds.Bullet:
                    DestroyBulletInternal((Bullet*) entity);
                    break;
                case EntityIds.Spawner:
                    DestroySpawnerInternal((Spawner*) entity);
                    break;
 
            }
        }
  
        private unsafe void PostUpdateCreateBoidSpawner(){
            _entities._BoidSpawnerAry.PostUpdateCreate(funcOnCreateEntityBoidSpawner,funcResetEntityBoidSpawner);
        }
        private unsafe void PostUpdateCreateBoidCell(){
            _entities._BoidCellAry.PostUpdateCreate(funcOnCreateEntityBoidCell,funcResetEntityBoidCell);
        }
        private unsafe void PostUpdateCreateBoid(){
            _entities._BoidAry.PostUpdateCreate(funcOnCreateEntityBoid,funcResetEntityBoid);
        }
        private unsafe void PostUpdateCreateBoidTarget(){
            _entities._BoidTargetAry.PostUpdateCreate(funcOnCreateEntityBoidTarget,funcResetEntityBoidTarget);
        }
        private unsafe void PostUpdateCreateBoidObstacle(){
            _entities._BoidObstacleAry.PostUpdateCreate(funcOnCreateEntityBoidObstacle,funcResetEntityBoidObstacle);
        }
        private unsafe void PostUpdateCreateItem(){
            _entities._ItemAry.PostUpdateCreate(funcOnCreateEntityItem,funcResetEntityItem);
        }
        private unsafe void PostUpdateCreateCamp(){
            _entities._CampAry.PostUpdateCreate(funcOnCreateEntityCamp,funcResetEntityCamp);
        }
        private unsafe void PostUpdateCreatePlayer(){
            _entities._PlayerAry.PostUpdateCreate(funcOnCreateEntityPlayer,funcResetEntityPlayer);
        }
        private unsafe void PostUpdateCreateEnemy(){
            _entities._EnemyAry.PostUpdateCreate(funcOnCreateEntityEnemy,funcResetEntityEnemy);
        }
        private unsafe void PostUpdateCreateBullet(){
            _entities._BulletAry.PostUpdateCreate(funcOnCreateEntityBullet,funcResetEntityBullet);
        }
        private unsafe void PostUpdateCreateSpawner(){
            _entities._SpawnerAry.PostUpdateCreate(funcOnCreateEntitySpawner,funcResetEntitySpawner);
        }
 

    #endregion
    #region Entity BoidSpawner
        private void OnEntityCreatedBoidSpawner(BoidSpawner* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnBoidSpawnerCreated(this, dstPtr);
        }

        private void ResetEntityBoidSpawner(BoidSpawner* dstPtr){
            *dstPtr = __default.BoidSpawner;
        }
        public Boolean BoidSpawnerExists(EntityRef entityRef){
            return GetBoidSpawner(entityRef) != null;
        }

        public BoidSpawner* PostCmdCreateBoidSpawner(){
            return _entities.CreateTempBoidSpawner(this);
        }

        private void DestroyBoidSpawnerInternal(BoidSpawner* ptr){
            _entities._BoidSpawnerAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnBoidSpawnerDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.BoidSpawner;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroyBoidSpawner(BoidSpawner* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyBoidSpawner(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public BoidSpawner* GetBoidSpawner(EntityRef entityRef){
            var ptr = _entities.GetBoidSpawner(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
    #region Entity BoidCell
        private void OnEntityCreatedBoidCell(BoidCell* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnBoidCellCreated(this, dstPtr);
        }

        private void ResetEntityBoidCell(BoidCell* dstPtr){
            *dstPtr = __default.BoidCell;
        }
        public Boolean BoidCellExists(EntityRef entityRef){
            return GetBoidCell(entityRef) != null;
        }

        public BoidCell* PostCmdCreateBoidCell(){
            return _entities.CreateTempBoidCell(this);
        }

        private void DestroyBoidCellInternal(BoidCell* ptr){
            _entities._BoidCellAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnBoidCellDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.BoidCell;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroyBoidCell(BoidCell* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyBoidCell(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public BoidCell* GetBoidCell(EntityRef entityRef){
            var ptr = _entities.GetBoidCell(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
    #region Entity Boid
        private void OnEntityCreatedBoid(Boid* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnBoidCreated(this, dstPtr);
        }

        private void ResetEntityBoid(Boid* dstPtr){
            *dstPtr = __default.Boid;
        }
        public Boolean BoidExists(EntityRef entityRef){
            return GetBoid(entityRef) != null;
        }

        public Boid* PostCmdCreateBoid(){
            return _entities.CreateTempBoid(this);
        }

        private void DestroyBoidInternal(Boid* ptr){
            _entities._BoidAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnBoidDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.Boid;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroyBoid(Boid* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyBoid(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public Boid* GetBoid(EntityRef entityRef){
            var ptr = _entities.GetBoid(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
    #region Entity BoidTarget
        private void OnEntityCreatedBoidTarget(BoidTarget* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnBoidTargetCreated(this, dstPtr);
        }

        private void ResetEntityBoidTarget(BoidTarget* dstPtr){
            *dstPtr = __default.BoidTarget;
        }
        public Boolean BoidTargetExists(EntityRef entityRef){
            return GetBoidTarget(entityRef) != null;
        }

        public BoidTarget* PostCmdCreateBoidTarget(){
            return _entities.CreateTempBoidTarget(this);
        }

        private void DestroyBoidTargetInternal(BoidTarget* ptr){
            _entities._BoidTargetAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnBoidTargetDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.BoidTarget;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroyBoidTarget(BoidTarget* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyBoidTarget(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public BoidTarget* GetBoidTarget(EntityRef entityRef){
            var ptr = _entities.GetBoidTarget(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
    #region Entity BoidObstacle
        private void OnEntityCreatedBoidObstacle(BoidObstacle* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnBoidObstacleCreated(this, dstPtr);
        }

        private void ResetEntityBoidObstacle(BoidObstacle* dstPtr){
            *dstPtr = __default.BoidObstacle;
        }
        public Boolean BoidObstacleExists(EntityRef entityRef){
            return GetBoidObstacle(entityRef) != null;
        }

        public BoidObstacle* PostCmdCreateBoidObstacle(){
            return _entities.CreateTempBoidObstacle(this);
        }

        private void DestroyBoidObstacleInternal(BoidObstacle* ptr){
            _entities._BoidObstacleAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnBoidObstacleDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.BoidObstacle;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroyBoidObstacle(BoidObstacle* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyBoidObstacle(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public BoidObstacle* GetBoidObstacle(EntityRef entityRef){
            var ptr = _entities.GetBoidObstacle(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
    #region Entity Item
        private void OnEntityCreatedItem(Item* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnItemCreated(this, dstPtr);
        }

        private void ResetEntityItem(Item* dstPtr){
            *dstPtr = __default.Item;
        }
        public Boolean ItemExists(EntityRef entityRef){
            return GetItem(entityRef) != null;
        }

        public Item* PostCmdCreateItem(){
            return _entities.CreateTempItem(this);
        }

        private void DestroyItemInternal(Item* ptr){
            _entities._ItemAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnItemDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.Item;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroyItem(Item* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyItem(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public Item* GetItem(EntityRef entityRef){
            var ptr = _entities.GetItem(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
    #region Entity Camp
        private void OnEntityCreatedCamp(Camp* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnCampCreated(this, dstPtr);
        }

        private void ResetEntityCamp(Camp* dstPtr){
            *dstPtr = __default.Camp;
        }
        public Boolean CampExists(EntityRef entityRef){
            return GetCamp(entityRef) != null;
        }

        public Camp* PostCmdCreateCamp(){
            return _entities.CreateTempCamp(this);
        }

        private void DestroyCampInternal(Camp* ptr){
            _entities._CampAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnCampDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.Camp;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroyCamp(Camp* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyCamp(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public Camp* GetCamp(EntityRef entityRef){
            var ptr = _entities.GetCamp(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
    #region Entity Player
        private void OnEntityCreatedPlayer(Player* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnPlayerCreated(this, dstPtr);
        }

        private void ResetEntityPlayer(Player* dstPtr){
            *dstPtr = __default.Player;
        }
        public Boolean PlayerExists(EntityRef entityRef){
            return GetPlayer(entityRef) != null;
        }

        public Player* PostCmdCreatePlayer(){
            return _entities.CreateTempPlayer(this);
        }

        private void DestroyPlayerInternal(Player* ptr){
            _entities._PlayerAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnPlayerDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.Player;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroyPlayer(Player* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyPlayer(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public Player* GetPlayer(EntityRef entityRef){
            var ptr = _entities.GetPlayer(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
    #region Entity Enemy
        private void OnEntityCreatedEnemy(Enemy* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnEnemyCreated(this, dstPtr);
        }

        private void ResetEntityEnemy(Enemy* dstPtr){
            *dstPtr = __default.Enemy;
        }
        public Boolean EnemyExists(EntityRef entityRef){
            return GetEnemy(entityRef) != null;
        }

        public Enemy* PostCmdCreateEnemy(){
            return _entities.CreateTempEnemy(this);
        }

        private void DestroyEnemyInternal(Enemy* ptr){
            _entities._EnemyAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnEnemyDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.Enemy;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroyEnemy(Enemy* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyEnemy(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public Enemy* GetEnemy(EntityRef entityRef){
            var ptr = _entities.GetEnemy(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
    #region Entity Bullet
        private void OnEntityCreatedBullet(Bullet* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnBulletCreated(this, dstPtr);
        }

        private void ResetEntityBullet(Bullet* dstPtr){
            *dstPtr = __default.Bullet;
        }
        public Boolean BulletExists(EntityRef entityRef){
            return GetBullet(entityRef) != null;
        }

        public Bullet* PostCmdCreateBullet(){
            return _entities.CreateTempBullet(this);
        }

        private void DestroyBulletInternal(Bullet* ptr){
            _entities._BulletAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnBulletDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.Bullet;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroyBullet(Bullet* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroyBullet(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public Bullet* GetBullet(EntityRef entityRef){
            var ptr = _entities.GetBullet(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
    #region Entity Spawner
        private void OnEntityCreatedSpawner(Spawner* dstPtr){
            EntityCreated(&dstPtr->_entity);
            _entityService.OnEntityCreated(this, (Entity*) dstPtr);
            _entityService.OnSpawnerCreated(this, dstPtr);
        }

        private void ResetEntitySpawner(Spawner* dstPtr){
            *dstPtr = __default.Spawner;
        }
        public Boolean SpawnerExists(EntityRef entityRef){
            return GetSpawner(entityRef) != null;
        }

        public Spawner* PostCmdCreateSpawner(){
            return _entities.CreateTempSpawner(this);
        }

        private void DestroySpawnerInternal(Spawner* ptr){
            _entities._SpawnerAry.ReleaseEntity((Entity*)ptr);
            _entityService.OnSpawnerDestroy(this, ptr);
            _entityService.OnEntityDestroy(this, &ptr->_entity);
            var copy = ptr->_entity;
            *ptr = __default.Spawner;
            ptr->_entity = copy;
            EntityDestroy(&ptr->_entity);
        }

        public void DestroySpawner(Spawner* ptr){
            if (ptr == null) {
                return;
            }

            if (ptr->_entity._active == false) {
                return;
            }

            _destroy.Enqueue(ptr->EntityRef);
        }

        public void DestroySpawner(EntityRef entityRef){
            _destroy.Enqueue(entityRef);
        }

        public Spawner* GetSpawner(EntityRef entityRef){
            var ptr = _entities.GetSpawner(entityRef._index);
            if (ptr->_entity._active && ptr->_entity._ref._version == entityRef._version) {
                return ptr;
            }

            return null;
        }
    #endregion
 

    #region GetEntity
        private BoidSpawnerIterator GetAllBoidSpawner(){
            return new BoidSpawnerIterator(_entities.GetBoidSpawner(0),_entities.MaxBoidSpawnerIndex + 1);
        }
        private BoidCellIterator GetAllBoidCell(){
            return new BoidCellIterator(_entities.GetBoidCell(0),_entities.MaxBoidCellIndex + 1);
        }
        private BoidIterator GetAllBoid(){
            return new BoidIterator(_entities.GetBoid(0),_entities.MaxBoidIndex + 1);
        }
        private BoidTargetIterator GetAllBoidTarget(){
            return new BoidTargetIterator(_entities.GetBoidTarget(0),_entities.MaxBoidTargetIndex + 1);
        }
        private BoidObstacleIterator GetAllBoidObstacle(){
            return new BoidObstacleIterator(_entities.GetBoidObstacle(0),_entities.MaxBoidObstacleIndex + 1);
        }
        private ItemIterator GetAllItem(){
            return new ItemIterator(_entities.GetItem(0),_entities.MaxItemIndex + 1);
        }
        private CampIterator GetAllCamp(){
            return new CampIterator(_entities.GetCamp(0),_entities.MaxCampIndex + 1);
        }
        private PlayerIterator GetAllPlayer(){
            return new PlayerIterator(_entities.GetPlayer(0),_entities.MaxPlayerIndex + 1);
        }
        private EnemyIterator GetAllEnemy(){
            return new EnemyIterator(_entities.GetEnemy(0),_entities.MaxEnemyIndex + 1);
        }
        private BulletIterator GetAllBullet(){
            return new BulletIterator(_entities.GetBullet(0),_entities.MaxBulletIndex + 1);
        }
        private SpawnerIterator GetAllSpawner(){
            return new SpawnerIterator(_entities.GetSpawner(0),_entities.MaxSpawnerIndex + 1);
        }
 

        private EntityFilter[] GetAllEntities(){
            var all = new EntityFilter[_entities.CurTotalEntityCount];
            var count = 0;
            {
                var ptr = _entities.GetBoidSpawner(0);
                var len = _entities._BoidSpawnerAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetBoidCell(0);
                var len = _entities._BoidCellAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetBoid(0);
                var len = _entities._BoidAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetBoidTarget(0);
                var len = _entities._BoidTargetAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetBoidObstacle(0);
                var len = _entities._BoidObstacleAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetItem(0);
                var len = _entities._ItemAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetCamp(0);
                var len = _entities._CampAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetPlayer(0);
                var len = _entities._PlayerAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetEnemy(0);
                var len = _entities._EnemyAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetBullet(0);
                var len = _entities._BulletAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
            {
                var ptr = _entities.GetSpawner(0);
                var len = _entities._SpawnerAry.Length;
                for (var i = 0; i < len; ++i, ++ptr) {
                    all[count++].Entity = &ptr->_entity;
                }
            }
 
            return all;
        }
    #endregion

    #region GetBuildInComponet
        public unsafe Buffer<AnimatorFilter> GetAllAnimator()
        {
            Buffer<AnimatorFilter> buffer = Buffer<AnimatorFilter>.Alloc(_entities.CurTotalEntityCount);
            Item* ItemPtr = this._entities.GetItem(0);
            var idxItem = 10;
            while (idxItem >= 0)
            {
                if (ItemPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &ItemPtr->_entity;
                  buffer.Items[buffer.Count].Animator = &ItemPtr->Animator;
                  ++buffer.Count;
                }
                --idxItem;
                ++ItemPtr;
            }
            Camp* CampPtr = this._entities.GetCamp(0);
            var idxCamp = 1;
            while (idxCamp >= 0)
            {
                if (CampPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &CampPtr->_entity;
                  buffer.Items[buffer.Count].Animator = &CampPtr->Animator;
                  ++buffer.Count;
                }
                --idxCamp;
                ++CampPtr;
            }
 
            return buffer;
        }
        public unsafe Buffer<CollisionAgentFilter> GetAllCollisionAgent()
        {
            Buffer<CollisionAgentFilter> buffer = Buffer<CollisionAgentFilter>.Alloc(_entities.CurTotalEntityCount);
 
            return buffer;
        }
        public unsafe Buffer<NavMeshAgentFilter> GetAllNavMeshAgent()
        {
            Buffer<NavMeshAgentFilter> buffer = Buffer<NavMeshAgentFilter>.Alloc(_entities.CurTotalEntityCount);
 
            return buffer;
        }
        public unsafe Buffer<PrefabFilter> GetAllPrefab()
        {
            Buffer<PrefabFilter> buffer = Buffer<PrefabFilter>.Alloc(_entities.CurTotalEntityCount);
 
            return buffer;
        }
        public unsafe Buffer<Transform2DFilter> GetAllTransform2D()
        {
            Buffer<Transform2DFilter> buffer = Buffer<Transform2DFilter>.Alloc(_entities.CurTotalEntityCount);
            Player* PlayerPtr = this._entities.GetPlayer(0);
            var idxPlayer = 2;
            while (idxPlayer >= 0)
            {
                if (PlayerPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &PlayerPtr->_entity;
                  buffer.Items[buffer.Count].Transform2D = &PlayerPtr->Transform2D;
                  ++buffer.Count;
                }
                --idxPlayer;
                ++PlayerPtr;
            }
            Enemy* EnemyPtr = this._entities.GetEnemy(0);
            var idxEnemy = 310;
            while (idxEnemy >= 0)
            {
                if (EnemyPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &EnemyPtr->_entity;
                  buffer.Items[buffer.Count].Transform2D = &EnemyPtr->Transform2D;
                  ++buffer.Count;
                }
                --idxEnemy;
                ++EnemyPtr;
            }
            Bullet* BulletPtr = this._entities.GetBullet(0);
            var idxBullet = 100;
            while (idxBullet >= 0)
            {
                if (BulletPtr->_entity._active)
                {
                  buffer.Items[buffer.Count].Entity = &BulletPtr->_entity;
                  buffer.Items[buffer.Count].Transform2D = &BulletPtr->Transform2D;
                  ++buffer.Count;
                }
                --idxBullet;
                ++BulletPtr;
            }
 
            return buffer;
        }
 
    #endregion
    }                                                                                
#endif                                                                                           
}                                                                                               