
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {                                                              
#if !DONT_USE_GENERATE_CODE                                                                      

    public static class EntityIds {
      public const int BoidSpawner = (int)(EEntityType.BoidSpawner);
      public const int BoidCell = (int)(EEntityType.BoidCell);
      public const int Boid = (int)(EEntityType.Boid);
      public const int BoidTarget = (int)(EEntityType.BoidTarget);
      public const int BoidObstacle = (int)(EEntityType.BoidObstacle);
      public const int Item = (int)(EEntityType.Item);
      public const int Camp = (int)(EEntityType.Camp);
      public const int Player = (int)(EEntityType.Player);
      public const int Enemy = (int)(EEntityType.Enemy);
      public const int Bullet = (int)(EEntityType.Bullet);
      public const int Spawner = (int)(EEntityType.Spawner);
 
      public const int TotalEntityTypeCount = ((int)(EEntityType.EnumCount) -1);
    }

    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct BoidSpawner :IEntity {
        public const Int32 INIT_COUNT = 2;
        internal Entity _entity;

        // Fields
        public SpawnerData SpawnerData;
        public AssetData AssetData;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct BoidCell :IEntity {
        public const Int32 INIT_COUNT = 1000;
        internal Entity _entity;

        // Fields
        public CellData CellData;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct Boid :IEntity {
        public const Int32 INIT_COUNT = 2000;
        internal Entity _entity;

        // Fields
        public LocalToWorld LocalToWorld;
        public AssetData AssetData;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct BoidTarget :IEntity {
        public const Int32 INIT_COUNT = 2;
        internal Entity _entity;

        // Fields
        public ViewData ViewData;
        public PositionData PositionData;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct BoidObstacle :IEntity {
        public const Int32 INIT_COUNT = 2;
        internal Entity _entity;

        // Fields
        public ViewData ViewData;
        public PositionData PositionData;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct Item :IEntity {
        public const Int32 INIT_COUNT = 10;
        internal Entity _entity;

        // Fields
        public EItemType ItemType;
        public ushort Asset;
        public LVector2 Pos;
        public EDir Dir;
        public LFloat Radius;
        public LVector2 HalfSize;
        public Animator Animator;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct Camp :IEntity {
        public const Int32 INIT_COUNT = 1;
        internal Entity _entity;

        // Fields
        public UnitData Unit;
        public ushort Asset;
        public LVector2 Pos;
        public EDir Dir;
        public LFloat Radius;
        public LVector2 HalfSize;
        public Animator Animator;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct Player :IEntity {
        public const Int32 INIT_COUNT = 2;
        internal Entity _entity;

        // Fields
        public EDir MoveRequest;
        public bool NeedFire;
        public SkillData Skill;
        public UnitData Unit;
        public MoveData Move;
        public Transform2D Transform2D;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct Enemy :IEntity {
        public const Int32 INIT_COUNT = 310;
        internal Entity _entity;

        // Fields
        public UnitData Unit;
        public Transform2D Transform2D;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct Bullet :IEntity {
        public const Int32 INIT_COUNT = 100;
        internal Entity _entity;

        // Fields
        public EntityRef Owner;
        public BulletData BulletData;
        public UnitData Unit;
        public MoveData Move;
        public Transform2D Transform2D;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct Spawner :IEntity {
        public const Int32 INIT_COUNT = 10;
        internal Entity _entity;

        // Fields
        public LVector2 Pos;
        public int SpawnLimit;
        public int CurrentSpawnNumber;
        public int SpawnType;
        public LFloat SpawnInterval;
        public LFloat SpawnRange;
        public LFloat SpawnTimer;
 
        // BuildIn properties
        public EntityRef EntityRef =>_entity._ref;
        public int EntityIndex =>_entity._ref._index;
        public EEntityType EntityType => (EEntityType)(_entity._ref._type);
        public bool IsActive =>_entity._active;

        #region Fields Getter Setter
        #endregion
    }
                                                                                 
#endif                                                                                           
}                                                                                               