
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {                                                              
#if !DONT_USE_GENERATE_CODE                                                                      
    public enum EAllComponentType : int {
        None,
        Animator,
        CollisionAgent,
        NavMeshAgent,
        Prefab,
        Transform2D,
  
        
        ViewData,
        SpawnerData,
        AssetData,
        LocalToWorld,
        CellIndexData,
        PositionData,
        CellData,
        ColliderData,
        UnitData,
        MoveData,
        AiData,
        SkillData,
        BulletData,
 

    }

    public class CompoenntIds {
      public const int Animator = (int)(EAllComponentType.Animator);
      public const int CollisionAgent = (int)(EAllComponentType.CollisionAgent);
      public const int NavMeshAgent = (int)(EAllComponentType.NavMeshAgent);
      public const int Prefab = (int)(EAllComponentType.Prefab);
      public const int Transform2D = (int)(EAllComponentType.Transform2D);
 
      public const int ViewData = (int)(EAllComponentType.ViewData);
      public const int SpawnerData = (int)(EAllComponentType.SpawnerData);
      public const int AssetData = (int)(EAllComponentType.AssetData);
      public const int LocalToWorld = (int)(EAllComponentType.LocalToWorld);
      public const int CellIndexData = (int)(EAllComponentType.CellIndexData);
      public const int PositionData = (int)(EAllComponentType.PositionData);
      public const int CellData = (int)(EAllComponentType.CellData);
      public const int ColliderData = (int)(EAllComponentType.ColliderData);
      public const int UnitData = (int)(EAllComponentType.UnitData);
      public const int MoveData = (int)(EAllComponentType.MoveData);
      public const int AiData = (int)(EAllComponentType.AiData);
      public const int SkillData = (int)(EAllComponentType.SkillData);
      public const int BulletData = (int)(EAllComponentType.BulletData);
 
    }

    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct ViewData {
        public int ViewId;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +ViewId.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct SpawnerData {
        public int Count;
        public LFloat Radius;
        public LVector3 Position;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Count.GetHashCode();
                hash = hash * 37 +Radius.GetHashCode();
                hash = hash * 37 +Position.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct AssetData {
        public int AssetId;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +AssetId.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct LocalToWorld {
        public LVector3 Position;
        public LVector3 Forward;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Position.GetHashCode();
                hash = hash * 37 +Forward.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct CellIndexData {
        public int Index;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Index.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct PositionData {
        public LVector3 Value;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Value.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct CellData {
        public int Count;
        public LVector3 Alignment;
        public LVector3 Separation;
        public LFloat ObstacleDistance;
        public int ObstaclePositionIndex;
        public int TargetPositionIndex;
        public int Index;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Count.GetHashCode();
                hash = hash * 37 +Alignment.GetHashCode();
                hash = hash * 37 +Separation.GetHashCode();
                hash = hash * 37 +ObstacleDistance.GetHashCode();
                hash = hash * 37 +ObstaclePositionIndex.GetHashCode();
                hash = hash * 37 +TargetPositionIndex.GetHashCode();
                hash = hash * 37 +Index.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct ColliderData {
        public LVector2 Size;
        public LFloat Radius;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Size.GetHashCode();
                hash = hash * 37 +Radius.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct UnitData {
        public ECampType Camp;
        public int Health;
        public int Damage;
        public LFloat Timer;
        public uint KillerLocalId;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Camp.GetHashCode();
                hash = hash * 37 +Health.GetHashCode();
                hash = hash * 37 +Damage.GetHashCode();
                hash = hash * 37 +Timer.GetHashCode();
                hash = hash * 37 +KillerLocalId.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct MoveData {
        public LFloat MoveSpd;
        public LFloat MaxMoveSpd;
        public bool IsChangedDir;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +MoveSpd.GetHashCode();
                hash = hash * 37 +MaxMoveSpd.GetHashCode();
                hash = hash * 37 +IsChangedDir.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct AiData {
        public LFloat Timer;
        public LFloat UpdateInterval;
        public LFloat FireRate;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +Timer.GetHashCode();
                hash = hash * 37 +UpdateInterval.GetHashCode();
                hash = hash * 37 +FireRate.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct SkillData {
        public LFloat CD;
        public LFloat CdTimer;
        public int BulletId;
        public bool IsNeedFire;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +CD.GetHashCode();
                hash = hash * 37 +CdTimer.GetHashCode();
                hash = hash * 37 +BulletId.GetHashCode();
                hash = hash * 37 +IsNeedFire.GetHashCode();
  
                return hash;
            }
        }
    }
    [StructLayoutAttribute(LayoutKind.Sequential)]
    public unsafe partial struct BulletData {
        public bool CanDestroyIron;
        public bool CanDestroyGrass;
        public uint OwnerLocalId;
 
        public override Int32 GetHashCode() {
            unchecked {
                var hash = 7;
                hash = hash * 37 +CanDestroyIron.GetHashCode();
                hash = hash * 37 +CanDestroyGrass.GetHashCode();
                hash = hash * 37 +OwnerLocalId.GetHashCode();
  
                return hash;
            }
        }
    }
                                                                                  
#endif                                                                                           
}                                                                                               