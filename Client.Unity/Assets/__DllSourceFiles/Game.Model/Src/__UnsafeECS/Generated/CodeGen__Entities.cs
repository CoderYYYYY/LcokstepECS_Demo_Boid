
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {                                                              
#if !DONT_USE_GENERATE_CODE                                                                      

    [StructLayout(LayoutKind.Sequential, Pack = Define.PackSize)]
    public unsafe partial class __entities {
        internal NativeEntityArray<BoidSpawner> _BoidSpawnerAry;
        internal NativeEntityArray<BoidCell> _BoidCellAry;
        internal NativeEntityArray<Boid> _BoidAry;
        internal NativeEntityArray<BoidTarget> _BoidTargetAry;
        internal NativeEntityArray<BoidObstacle> _BoidObstacleAry;
        internal NativeEntityArray<Item> _ItemAry;
        internal NativeEntityArray<Camp> _CampAry;
        internal NativeEntityArray<Player> _PlayerAry;
        internal NativeEntityArray<Enemy> _EnemyAry;
        internal NativeEntityArray<Bullet> _BulletAry;
        internal NativeEntityArray<Spawner> _SpawnerAry;
 
        public unsafe void Alloc(){
            _BoidSpawnerAry.Alloc((int)EEntityType.BoidSpawner,BoidSpawner.INIT_COUNT);
            _BoidCellAry.Alloc((int)EEntityType.BoidCell,BoidCell.INIT_COUNT);
            _BoidAry.Alloc((int)EEntityType.Boid,Boid.INIT_COUNT);
            _BoidTargetAry.Alloc((int)EEntityType.BoidTarget,BoidTarget.INIT_COUNT);
            _BoidObstacleAry.Alloc((int)EEntityType.BoidObstacle,BoidObstacle.INIT_COUNT);
            _ItemAry.Alloc((int)EEntityType.Item,Item.INIT_COUNT);
            _CampAry.Alloc((int)EEntityType.Camp,Camp.INIT_COUNT);
            _PlayerAry.Alloc((int)EEntityType.Player,Player.INIT_COUNT);
            _EnemyAry.Alloc((int)EEntityType.Enemy,Enemy.INIT_COUNT);
            _BulletAry.Alloc((int)EEntityType.Bullet,Bullet.INIT_COUNT);
            _SpawnerAry.Alloc((int)EEntityType.Spawner,Spawner.INIT_COUNT);
 
        }
        public unsafe void Free(){
            _BoidSpawnerAry.Free();
            _BoidCellAry.Free();
            _BoidAry.Free();
            _BoidTargetAry.Free();
            _BoidObstacleAry.Free();
            _ItemAry.Free();
            _CampAry.Free();
            _PlayerAry.Free();
            _EnemyAry.Free();
            _BulletAry.Free();
            _SpawnerAry.Free();
 
        }
        public __entities Clone(){
            var ret = new __entities();
            CopyTo(ret);
            return ret;
        }
        public void CopyTo(__entities dst){
            _BoidSpawnerAry.CopyTo(ref dst._BoidSpawnerAry);
            _BoidCellAry.CopyTo(ref dst._BoidCellAry);
            _BoidAry.CopyTo(ref dst._BoidAry);
            _BoidTargetAry.CopyTo(ref dst._BoidTargetAry);
            _BoidObstacleAry.CopyTo(ref dst._BoidObstacleAry);
            _ItemAry.CopyTo(ref dst._ItemAry);
            _CampAry.CopyTo(ref dst._CampAry);
            _PlayerAry.CopyTo(ref dst._PlayerAry);
            _EnemyAry.CopyTo(ref dst._EnemyAry);
            _BulletAry.CopyTo(ref dst._BulletAry);
            _SpawnerAry.CopyTo(ref dst._SpawnerAry);
 
        }

        internal unsafe BoidSpawner* CreateTempBoidSpawner(Context context) {
            return _BoidSpawnerAry.CreateTempEntity(context);
        }
        internal unsafe BoidSpawner* GetTempBoidSpawner(int idx) {
            return _BoidSpawnerAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBoidSpawnerAry(){
            if (_BoidSpawnerAry._WaitCreateCount > 0) {
                var len = _BoidSpawnerAry._WaitCreateCount;
                var ptr = _BoidSpawnerAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.BoidSpawner;
                    ptr->_entity._ref._type = (int)EEntityType.BoidSpawner;
                }
                _BoidSpawnerAry._WaitCreateCount = 0;
            }
        }
        internal unsafe BoidCell* CreateTempBoidCell(Context context) {
            return _BoidCellAry.CreateTempEntity(context);
        }
        internal unsafe BoidCell* GetTempBoidCell(int idx) {
            return _BoidCellAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBoidCellAry(){
            if (_BoidCellAry._WaitCreateCount > 0) {
                var len = _BoidCellAry._WaitCreateCount;
                var ptr = _BoidCellAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.BoidCell;
                    ptr->_entity._ref._type = (int)EEntityType.BoidCell;
                }
                _BoidCellAry._WaitCreateCount = 0;
            }
        }
        internal unsafe Boid* CreateTempBoid(Context context) {
            return _BoidAry.CreateTempEntity(context);
        }
        internal unsafe Boid* GetTempBoid(int idx) {
            return _BoidAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBoidAry(){
            if (_BoidAry._WaitCreateCount > 0) {
                var len = _BoidAry._WaitCreateCount;
                var ptr = _BoidAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.Boid;
                    ptr->_entity._ref._type = (int)EEntityType.Boid;
                }
                _BoidAry._WaitCreateCount = 0;
            }
        }
        internal unsafe BoidTarget* CreateTempBoidTarget(Context context) {
            return _BoidTargetAry.CreateTempEntity(context);
        }
        internal unsafe BoidTarget* GetTempBoidTarget(int idx) {
            return _BoidTargetAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBoidTargetAry(){
            if (_BoidTargetAry._WaitCreateCount > 0) {
                var len = _BoidTargetAry._WaitCreateCount;
                var ptr = _BoidTargetAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.BoidTarget;
                    ptr->_entity._ref._type = (int)EEntityType.BoidTarget;
                }
                _BoidTargetAry._WaitCreateCount = 0;
            }
        }
        internal unsafe BoidObstacle* CreateTempBoidObstacle(Context context) {
            return _BoidObstacleAry.CreateTempEntity(context);
        }
        internal unsafe BoidObstacle* GetTempBoidObstacle(int idx) {
            return _BoidObstacleAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBoidObstacleAry(){
            if (_BoidObstacleAry._WaitCreateCount > 0) {
                var len = _BoidObstacleAry._WaitCreateCount;
                var ptr = _BoidObstacleAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.BoidObstacle;
                    ptr->_entity._ref._type = (int)EEntityType.BoidObstacle;
                }
                _BoidObstacleAry._WaitCreateCount = 0;
            }
        }
        internal unsafe Item* CreateTempItem(Context context) {
            return _ItemAry.CreateTempEntity(context);
        }
        internal unsafe Item* GetTempItem(int idx) {
            return _ItemAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempItemAry(){
            if (_ItemAry._WaitCreateCount > 0) {
                var len = _ItemAry._WaitCreateCount;
                var ptr = _ItemAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.Item;
                    ptr->_entity._ref._type = (int)EEntityType.Item;
                }
                _ItemAry._WaitCreateCount = 0;
            }
        }
        internal unsafe Camp* CreateTempCamp(Context context) {
            return _CampAry.CreateTempEntity(context);
        }
        internal unsafe Camp* GetTempCamp(int idx) {
            return _CampAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempCampAry(){
            if (_CampAry._WaitCreateCount > 0) {
                var len = _CampAry._WaitCreateCount;
                var ptr = _CampAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.Camp;
                    ptr->_entity._ref._type = (int)EEntityType.Camp;
                }
                _CampAry._WaitCreateCount = 0;
            }
        }
        internal unsafe Player* CreateTempPlayer(Context context) {
            return _PlayerAry.CreateTempEntity(context);
        }
        internal unsafe Player* GetTempPlayer(int idx) {
            return _PlayerAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempPlayerAry(){
            if (_PlayerAry._WaitCreateCount > 0) {
                var len = _PlayerAry._WaitCreateCount;
                var ptr = _PlayerAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.Player;
                    ptr->_entity._ref._type = (int)EEntityType.Player;
                }
                _PlayerAry._WaitCreateCount = 0;
            }
        }
        internal unsafe Enemy* CreateTempEnemy(Context context) {
            return _EnemyAry.CreateTempEntity(context);
        }
        internal unsafe Enemy* GetTempEnemy(int idx) {
            return _EnemyAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempEnemyAry(){
            if (_EnemyAry._WaitCreateCount > 0) {
                var len = _EnemyAry._WaitCreateCount;
                var ptr = _EnemyAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.Enemy;
                    ptr->_entity._ref._type = (int)EEntityType.Enemy;
                }
                _EnemyAry._WaitCreateCount = 0;
            }
        }
        internal unsafe Bullet* CreateTempBullet(Context context) {
            return _BulletAry.CreateTempEntity(context);
        }
        internal unsafe Bullet* GetTempBullet(int idx) {
            return _BulletAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempBulletAry(){
            if (_BulletAry._WaitCreateCount > 0) {
                var len = _BulletAry._WaitCreateCount;
                var ptr = _BulletAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.Bullet;
                    ptr->_entity._ref._type = (int)EEntityType.Bullet;
                }
                _BulletAry._WaitCreateCount = 0;
            }
        }
        internal unsafe Spawner* CreateTempSpawner(Context context) {
            return _SpawnerAry.CreateTempEntity(context);
        }
        internal unsafe Spawner* GetTempSpawner(int idx) {
            return _SpawnerAry.GetTempEntity(idx);
        }
        internal unsafe void ClearTempSpawnerAry(){
            if (_SpawnerAry._WaitCreateCount > 0) {
                var len = _SpawnerAry._WaitCreateCount;
                var ptr = _SpawnerAry._WaitCreateAry.GetPointer(0);
                for(int i =0;i < len; ++i,++ptr){
                    *ptr = __default.Spawner;
                    ptr->_entity._ref._type = (int)EEntityType.Spawner;
                }
                _SpawnerAry._WaitCreateCount = 0;
            }
        }
 

        internal unsafe NativeArray<T> GetAllEntityFiledAry<T,TEntity>(NativeEntityArray<TEntity> entityAry,int offset)
            where T: unmanaged
            where TEntity : unmanaged, IEntity
        {
            var entityCount = entityAry.CurEntityCount;
            var retAry = new NativeArray<T>(entityCount, Allocator.Persistent, NativeArrayOptions.UninitializedMemory);
            int curCopyedCount = 0;
            if (entityCount > 0) {
                var dstPtr = retAry.GetPointer(0);
                var len = entityAry.Length;
                var srcPtr = entityAry._EntityAry.GetPointer(0);
                for(int i =0;i < len; ++i,++srcPtr){
                    if(((Entity*) srcPtr)->_active){
                        #if DEBUG
                        if(++curCopyedCount > curCopyedCount){
                            throw new Exception("FrameWork error! CurEntityCount !=  active Entity count");
                        }
                        #endif
                        *dstPtr = *((T*)((byte*)(srcPtr) + offset));
                        ++dstPtr;
                    }
                }
            }
            return retAry;
        }
//#region Size Offset of Entity Filed
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBoidSpawner_SpawnerData_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,BoidSpawner>(_BoidSpawnerAry,GetOffsetOfBoidSpawner_SpawnerData()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<SpawnerData> GetAllBoidSpawner_SpawnerData(){return GetAllEntityFiledAry<SpawnerData,BoidSpawner>(_BoidSpawnerAry,GetOffsetOfBoidSpawner_SpawnerData());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBoidSpawner_SpawnerData(){
            var tempObj =  new BoidSpawner(); BoidSpawner* ptr = &tempObj;var filedPtr = &(ptr->SpawnerData);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBoidSpawner_AssetData_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,BoidSpawner>(_BoidSpawnerAry,GetOffsetOfBoidSpawner_AssetData()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<AssetData> GetAllBoidSpawner_AssetData(){return GetAllEntityFiledAry<AssetData,BoidSpawner>(_BoidSpawnerAry,GetOffsetOfBoidSpawner_AssetData());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBoidSpawner_AssetData(){
            var tempObj =  new BoidSpawner(); BoidSpawner* ptr = &tempObj;var filedPtr = &(ptr->AssetData);
            return (int)((long) filedPtr - (long) ptr);        }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBoidCell_CellData_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,BoidCell>(_BoidCellAry,GetOffsetOfBoidCell_CellData()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<CellData> GetAllBoidCell_CellData(){return GetAllEntityFiledAry<CellData,BoidCell>(_BoidCellAry,GetOffsetOfBoidCell_CellData());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBoidCell_CellData(){
            var tempObj =  new BoidCell(); BoidCell* ptr = &tempObj;var filedPtr = &(ptr->CellData);
            return (int)((long) filedPtr - (long) ptr);        }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBoid_LocalToWorld_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Boid>(_BoidAry,GetOffsetOfBoid_LocalToWorld()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LocalToWorld> GetAllBoid_LocalToWorld(){return GetAllEntityFiledAry<LocalToWorld,Boid>(_BoidAry,GetOffsetOfBoid_LocalToWorld());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBoid_LocalToWorld(){
            var tempObj =  new Boid(); Boid* ptr = &tempObj;var filedPtr = &(ptr->LocalToWorld);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBoid_AssetData_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Boid>(_BoidAry,GetOffsetOfBoid_AssetData()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<AssetData> GetAllBoid_AssetData(){return GetAllEntityFiledAry<AssetData,Boid>(_BoidAry,GetOffsetOfBoid_AssetData());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBoid_AssetData(){
            var tempObj =  new Boid(); Boid* ptr = &tempObj;var filedPtr = &(ptr->AssetData);
            return (int)((long) filedPtr - (long) ptr);        }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBoidTarget_ViewData_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,BoidTarget>(_BoidTargetAry,GetOffsetOfBoidTarget_ViewData()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<ViewData> GetAllBoidTarget_ViewData(){return GetAllEntityFiledAry<ViewData,BoidTarget>(_BoidTargetAry,GetOffsetOfBoidTarget_ViewData());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBoidTarget_ViewData(){
            var tempObj =  new BoidTarget(); BoidTarget* ptr = &tempObj;var filedPtr = &(ptr->ViewData);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBoidTarget_PositionData_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,BoidTarget>(_BoidTargetAry,GetOffsetOfBoidTarget_PositionData()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<PositionData> GetAllBoidTarget_PositionData(){return GetAllEntityFiledAry<PositionData,BoidTarget>(_BoidTargetAry,GetOffsetOfBoidTarget_PositionData());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBoidTarget_PositionData(){
            var tempObj =  new BoidTarget(); BoidTarget* ptr = &tempObj;var filedPtr = &(ptr->PositionData);
            return (int)((long) filedPtr - (long) ptr);        }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBoidObstacle_ViewData_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,BoidObstacle>(_BoidObstacleAry,GetOffsetOfBoidObstacle_ViewData()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<ViewData> GetAllBoidObstacle_ViewData(){return GetAllEntityFiledAry<ViewData,BoidObstacle>(_BoidObstacleAry,GetOffsetOfBoidObstacle_ViewData());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBoidObstacle_ViewData(){
            var tempObj =  new BoidObstacle(); BoidObstacle* ptr = &tempObj;var filedPtr = &(ptr->ViewData);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBoidObstacle_PositionData_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,BoidObstacle>(_BoidObstacleAry,GetOffsetOfBoidObstacle_PositionData()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<PositionData> GetAllBoidObstacle_PositionData(){return GetAllEntityFiledAry<PositionData,BoidObstacle>(_BoidObstacleAry,GetOffsetOfBoidObstacle_PositionData());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBoidObstacle_PositionData(){
            var tempObj =  new BoidObstacle(); BoidObstacle* ptr = &tempObj;var filedPtr = &(ptr->PositionData);
            return (int)((long) filedPtr - (long) ptr);        }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllItem_ItemType_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Item>(_ItemAry,GetOffsetOfItem_ItemType()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<EItemType> GetAllItem_ItemType(){return GetAllEntityFiledAry<EItemType,Item>(_ItemAry,GetOffsetOfItem_ItemType());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfItem_ItemType(){
            var tempObj =  new Item(); Item* ptr = &tempObj;var filedPtr = &(ptr->ItemType);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllItem_Asset_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Item>(_ItemAry,GetOffsetOfItem_Asset()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<ushort> GetAllItem_Asset(){return GetAllEntityFiledAry<ushort,Item>(_ItemAry,GetOffsetOfItem_Asset());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfItem_Asset(){
            var tempObj =  new Item(); Item* ptr = &tempObj;var filedPtr = &(ptr->Asset);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllItem_Pos_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Item>(_ItemAry,GetOffsetOfItem_Pos()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LVector2> GetAllItem_Pos(){return GetAllEntityFiledAry<LVector2,Item>(_ItemAry,GetOffsetOfItem_Pos());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfItem_Pos(){
            var tempObj =  new Item(); Item* ptr = &tempObj;var filedPtr = &(ptr->Pos);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllItem_Dir_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Item>(_ItemAry,GetOffsetOfItem_Dir()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<EDir> GetAllItem_Dir(){return GetAllEntityFiledAry<EDir,Item>(_ItemAry,GetOffsetOfItem_Dir());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfItem_Dir(){
            var tempObj =  new Item(); Item* ptr = &tempObj;var filedPtr = &(ptr->Dir);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllItem_Radius_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Item>(_ItemAry,GetOffsetOfItem_Radius()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LFloat> GetAllItem_Radius(){return GetAllEntityFiledAry<LFloat,Item>(_ItemAry,GetOffsetOfItem_Radius());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfItem_Radius(){
            var tempObj =  new Item(); Item* ptr = &tempObj;var filedPtr = &(ptr->Radius);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllItem_HalfSize_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Item>(_ItemAry,GetOffsetOfItem_HalfSize()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LVector2> GetAllItem_HalfSize(){return GetAllEntityFiledAry<LVector2,Item>(_ItemAry,GetOffsetOfItem_HalfSize());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfItem_HalfSize(){
            var tempObj =  new Item(); Item* ptr = &tempObj;var filedPtr = &(ptr->HalfSize);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllItem_Animator_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Item>(_ItemAry,GetOffsetOfItem_Animator()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<Animator> GetAllItem_Animator(){return GetAllEntityFiledAry<Animator,Item>(_ItemAry,GetOffsetOfItem_Animator());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfItem_Animator(){
            var tempObj =  new Item(); Item* ptr = &tempObj;var filedPtr = &(ptr->Animator);
            return (int)((long) filedPtr - (long) ptr);        }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllCamp_Unit_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Camp>(_CampAry,GetOffsetOfCamp_Unit()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<UnitData> GetAllCamp_Unit(){return GetAllEntityFiledAry<UnitData,Camp>(_CampAry,GetOffsetOfCamp_Unit());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCamp_Unit(){
            var tempObj =  new Camp(); Camp* ptr = &tempObj;var filedPtr = &(ptr->Unit);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllCamp_Asset_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Camp>(_CampAry,GetOffsetOfCamp_Asset()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<ushort> GetAllCamp_Asset(){return GetAllEntityFiledAry<ushort,Camp>(_CampAry,GetOffsetOfCamp_Asset());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCamp_Asset(){
            var tempObj =  new Camp(); Camp* ptr = &tempObj;var filedPtr = &(ptr->Asset);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllCamp_Pos_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Camp>(_CampAry,GetOffsetOfCamp_Pos()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LVector2> GetAllCamp_Pos(){return GetAllEntityFiledAry<LVector2,Camp>(_CampAry,GetOffsetOfCamp_Pos());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCamp_Pos(){
            var tempObj =  new Camp(); Camp* ptr = &tempObj;var filedPtr = &(ptr->Pos);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllCamp_Dir_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Camp>(_CampAry,GetOffsetOfCamp_Dir()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<EDir> GetAllCamp_Dir(){return GetAllEntityFiledAry<EDir,Camp>(_CampAry,GetOffsetOfCamp_Dir());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCamp_Dir(){
            var tempObj =  new Camp(); Camp* ptr = &tempObj;var filedPtr = &(ptr->Dir);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllCamp_Radius_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Camp>(_CampAry,GetOffsetOfCamp_Radius()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LFloat> GetAllCamp_Radius(){return GetAllEntityFiledAry<LFloat,Camp>(_CampAry,GetOffsetOfCamp_Radius());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCamp_Radius(){
            var tempObj =  new Camp(); Camp* ptr = &tempObj;var filedPtr = &(ptr->Radius);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllCamp_HalfSize_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Camp>(_CampAry,GetOffsetOfCamp_HalfSize()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LVector2> GetAllCamp_HalfSize(){return GetAllEntityFiledAry<LVector2,Camp>(_CampAry,GetOffsetOfCamp_HalfSize());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCamp_HalfSize(){
            var tempObj =  new Camp(); Camp* ptr = &tempObj;var filedPtr = &(ptr->HalfSize);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllCamp_Animator_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Camp>(_CampAry,GetOffsetOfCamp_Animator()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<Animator> GetAllCamp_Animator(){return GetAllEntityFiledAry<Animator,Camp>(_CampAry,GetOffsetOfCamp_Animator());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCamp_Animator(){
            var tempObj =  new Camp(); Camp* ptr = &tempObj;var filedPtr = &(ptr->Animator);
            return (int)((long) filedPtr - (long) ptr);        }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllPlayer_MoveRequest_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Player>(_PlayerAry,GetOffsetOfPlayer_MoveRequest()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<EDir> GetAllPlayer_MoveRequest(){return GetAllEntityFiledAry<EDir,Player>(_PlayerAry,GetOffsetOfPlayer_MoveRequest());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfPlayer_MoveRequest(){
            var tempObj =  new Player(); Player* ptr = &tempObj;var filedPtr = &(ptr->MoveRequest);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllPlayer_NeedFire_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Player>(_PlayerAry,GetOffsetOfPlayer_NeedFire()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<bool> GetAllPlayer_NeedFire(){return GetAllEntityFiledAry<bool,Player>(_PlayerAry,GetOffsetOfPlayer_NeedFire());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfPlayer_NeedFire(){
            var tempObj =  new Player(); Player* ptr = &tempObj;var filedPtr = &(ptr->NeedFire);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllPlayer_Skill_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Player>(_PlayerAry,GetOffsetOfPlayer_Skill()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<SkillData> GetAllPlayer_Skill(){return GetAllEntityFiledAry<SkillData,Player>(_PlayerAry,GetOffsetOfPlayer_Skill());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfPlayer_Skill(){
            var tempObj =  new Player(); Player* ptr = &tempObj;var filedPtr = &(ptr->Skill);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllPlayer_Unit_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Player>(_PlayerAry,GetOffsetOfPlayer_Unit()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<UnitData> GetAllPlayer_Unit(){return GetAllEntityFiledAry<UnitData,Player>(_PlayerAry,GetOffsetOfPlayer_Unit());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfPlayer_Unit(){
            var tempObj =  new Player(); Player* ptr = &tempObj;var filedPtr = &(ptr->Unit);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllPlayer_Move_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Player>(_PlayerAry,GetOffsetOfPlayer_Move()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<MoveData> GetAllPlayer_Move(){return GetAllEntityFiledAry<MoveData,Player>(_PlayerAry,GetOffsetOfPlayer_Move());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfPlayer_Move(){
            var tempObj =  new Player(); Player* ptr = &tempObj;var filedPtr = &(ptr->Move);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllPlayer_Transform2D_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Player>(_PlayerAry,GetOffsetOfPlayer_Transform2D()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<Transform2D> GetAllPlayer_Transform2D(){return GetAllEntityFiledAry<Transform2D,Player>(_PlayerAry,GetOffsetOfPlayer_Transform2D());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfPlayer_Transform2D(){
            var tempObj =  new Player(); Player* ptr = &tempObj;var filedPtr = &(ptr->Transform2D);
            return (int)((long) filedPtr - (long) ptr);        }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllEnemy_Unit_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Enemy>(_EnemyAry,GetOffsetOfEnemy_Unit()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<UnitData> GetAllEnemy_Unit(){return GetAllEntityFiledAry<UnitData,Enemy>(_EnemyAry,GetOffsetOfEnemy_Unit());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfEnemy_Unit(){
            var tempObj =  new Enemy(); Enemy* ptr = &tempObj;var filedPtr = &(ptr->Unit);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllEnemy_Transform2D_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Enemy>(_EnemyAry,GetOffsetOfEnemy_Transform2D()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<Transform2D> GetAllEnemy_Transform2D(){return GetAllEntityFiledAry<Transform2D,Enemy>(_EnemyAry,GetOffsetOfEnemy_Transform2D());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfEnemy_Transform2D(){
            var tempObj =  new Enemy(); Enemy* ptr = &tempObj;var filedPtr = &(ptr->Transform2D);
            return (int)((long) filedPtr - (long) ptr);        }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBullet_Owner_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Bullet>(_BulletAry,GetOffsetOfBullet_Owner()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<EntityRef> GetAllBullet_Owner(){return GetAllEntityFiledAry<EntityRef,Bullet>(_BulletAry,GetOffsetOfBullet_Owner());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBullet_Owner(){
            var tempObj =  new Bullet(); Bullet* ptr = &tempObj;var filedPtr = &(ptr->Owner);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBullet_BulletData_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Bullet>(_BulletAry,GetOffsetOfBullet_BulletData()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<BulletData> GetAllBullet_BulletData(){return GetAllEntityFiledAry<BulletData,Bullet>(_BulletAry,GetOffsetOfBullet_BulletData());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBullet_BulletData(){
            var tempObj =  new Bullet(); Bullet* ptr = &tempObj;var filedPtr = &(ptr->BulletData);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBullet_Unit_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Bullet>(_BulletAry,GetOffsetOfBullet_Unit()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<UnitData> GetAllBullet_Unit(){return GetAllEntityFiledAry<UnitData,Bullet>(_BulletAry,GetOffsetOfBullet_Unit());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBullet_Unit(){
            var tempObj =  new Bullet(); Bullet* ptr = &tempObj;var filedPtr = &(ptr->Unit);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBullet_Move_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Bullet>(_BulletAry,GetOffsetOfBullet_Move()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<MoveData> GetAllBullet_Move(){return GetAllEntityFiledAry<MoveData,Bullet>(_BulletAry,GetOffsetOfBullet_Move());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBullet_Move(){
            var tempObj =  new Bullet(); Bullet* ptr = &tempObj;var filedPtr = &(ptr->Move);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllBullet_Transform2D_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Bullet>(_BulletAry,GetOffsetOfBullet_Transform2D()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<Transform2D> GetAllBullet_Transform2D(){return GetAllEntityFiledAry<Transform2D,Bullet>(_BulletAry,GetOffsetOfBullet_Transform2D());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBullet_Transform2D(){
            var tempObj =  new Bullet(); Bullet* ptr = &tempObj;var filedPtr = &(ptr->Transform2D);
            return (int)((long) filedPtr - (long) ptr);        }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllSpawner_Pos_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Spawner>(_SpawnerAry,GetOffsetOfSpawner_Pos()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LVector2> GetAllSpawner_Pos(){return GetAllEntityFiledAry<LVector2,Spawner>(_SpawnerAry,GetOffsetOfSpawner_Pos());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSpawner_Pos(){
            var tempObj =  new Spawner(); Spawner* ptr = &tempObj;var filedPtr = &(ptr->Pos);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllSpawner_SpawnLimit_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Spawner>(_SpawnerAry,GetOffsetOfSpawner_SpawnLimit()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<int> GetAllSpawner_SpawnLimit(){return GetAllEntityFiledAry<int,Spawner>(_SpawnerAry,GetOffsetOfSpawner_SpawnLimit());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSpawner_SpawnLimit(){
            var tempObj =  new Spawner(); Spawner* ptr = &tempObj;var filedPtr = &(ptr->SpawnLimit);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllSpawner_CurrentSpawnNumber_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Spawner>(_SpawnerAry,GetOffsetOfSpawner_CurrentSpawnNumber()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<int> GetAllSpawner_CurrentSpawnNumber(){return GetAllEntityFiledAry<int,Spawner>(_SpawnerAry,GetOffsetOfSpawner_CurrentSpawnNumber());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSpawner_CurrentSpawnNumber(){
            var tempObj =  new Spawner(); Spawner* ptr = &tempObj;var filedPtr = &(ptr->CurrentSpawnNumber);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllSpawner_SpawnType_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Spawner>(_SpawnerAry,GetOffsetOfSpawner_SpawnType()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<int> GetAllSpawner_SpawnType(){return GetAllEntityFiledAry<int,Spawner>(_SpawnerAry,GetOffsetOfSpawner_SpawnType());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSpawner_SpawnType(){
            var tempObj =  new Spawner(); Spawner* ptr = &tempObj;var filedPtr = &(ptr->SpawnType);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllSpawner_SpawnInterval_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Spawner>(_SpawnerAry,GetOffsetOfSpawner_SpawnInterval()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LFloat> GetAllSpawner_SpawnInterval(){return GetAllEntityFiledAry<LFloat,Spawner>(_SpawnerAry,GetOffsetOfSpawner_SpawnInterval());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSpawner_SpawnInterval(){
            var tempObj =  new Spawner(); Spawner* ptr = &tempObj;var filedPtr = &(ptr->SpawnInterval);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllSpawner_SpawnRange_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Spawner>(_SpawnerAry,GetOffsetOfSpawner_SpawnRange()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LFloat> GetAllSpawner_SpawnRange(){return GetAllEntityFiledAry<LFloat,Spawner>(_SpawnerAry,GetOffsetOfSpawner_SpawnRange());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSpawner_SpawnRange(){
            var tempObj =  new Spawner(); Spawner* ptr = &tempObj;var filedPtr = &(ptr->SpawnRange);
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<T> GetAllSpawner_SpawnTimer_Filed<T>(int compFiledOffset)
         where T: unmanaged{return GetAllEntityFiledAry<T,Spawner>(_SpawnerAry,GetOffsetOfSpawner_SpawnTimer()+ compFiledOffset);}
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal NativeArray<LFloat> GetAllSpawner_SpawnTimer(){return GetAllEntityFiledAry<LFloat,Spawner>(_SpawnerAry,GetOffsetOfSpawner_SpawnTimer());} 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSpawner_SpawnTimer(){
            var tempObj =  new Spawner(); Spawner* ptr = &tempObj;var filedPtr = &(ptr->SpawnTimer);
            return (int)((long) filedPtr - (long) ptr);        }
 
       
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfViewData_ViewId(){
            var tempObj =  new ViewData(); ViewData* ptr = &tempObj; var filedPtr = &(ptr->ViewId); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfViewData_ViewId(){ return sizeof(int); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSpawnerData_Count(){
            var tempObj =  new SpawnerData(); SpawnerData* ptr = &tempObj; var filedPtr = &(ptr->Count); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfSpawnerData_Count(){ return sizeof(int); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSpawnerData_Radius(){
            var tempObj =  new SpawnerData(); SpawnerData* ptr = &tempObj; var filedPtr = &(ptr->Radius); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfSpawnerData_Radius(){ return sizeof(LFloat); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSpawnerData_Position(){
            var tempObj =  new SpawnerData(); SpawnerData* ptr = &tempObj; var filedPtr = &(ptr->Position); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfSpawnerData_Position(){ return sizeof(LVector3); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfAssetData_AssetId(){
            var tempObj =  new AssetData(); AssetData* ptr = &tempObj; var filedPtr = &(ptr->AssetId); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfAssetData_AssetId(){ return sizeof(int); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfLocalToWorld_Position(){
            var tempObj =  new LocalToWorld(); LocalToWorld* ptr = &tempObj; var filedPtr = &(ptr->Position); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfLocalToWorld_Position(){ return sizeof(LVector3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfLocalToWorld_Forward(){
            var tempObj =  new LocalToWorld(); LocalToWorld* ptr = &tempObj; var filedPtr = &(ptr->Forward); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfLocalToWorld_Forward(){ return sizeof(LVector3); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCellIndexData_Index(){
            var tempObj =  new CellIndexData(); CellIndexData* ptr = &tempObj; var filedPtr = &(ptr->Index); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfCellIndexData_Index(){ return sizeof(int); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfPositionData_Value(){
            var tempObj =  new PositionData(); PositionData* ptr = &tempObj; var filedPtr = &(ptr->Value); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfPositionData_Value(){ return sizeof(LVector3); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCellData_Count(){
            var tempObj =  new CellData(); CellData* ptr = &tempObj; var filedPtr = &(ptr->Count); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfCellData_Count(){ return sizeof(int); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCellData_Alignment(){
            var tempObj =  new CellData(); CellData* ptr = &tempObj; var filedPtr = &(ptr->Alignment); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfCellData_Alignment(){ return sizeof(LVector3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCellData_Separation(){
            var tempObj =  new CellData(); CellData* ptr = &tempObj; var filedPtr = &(ptr->Separation); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfCellData_Separation(){ return sizeof(LVector3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCellData_ObstacleDistance(){
            var tempObj =  new CellData(); CellData* ptr = &tempObj; var filedPtr = &(ptr->ObstacleDistance); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfCellData_ObstacleDistance(){ return sizeof(LFloat); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCellData_ObstaclePositionIndex(){
            var tempObj =  new CellData(); CellData* ptr = &tempObj; var filedPtr = &(ptr->ObstaclePositionIndex); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfCellData_ObstaclePositionIndex(){ return sizeof(int); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCellData_TargetPositionIndex(){
            var tempObj =  new CellData(); CellData* ptr = &tempObj; var filedPtr = &(ptr->TargetPositionIndex); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfCellData_TargetPositionIndex(){ return sizeof(int); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfCellData_Index(){
            var tempObj =  new CellData(); CellData* ptr = &tempObj; var filedPtr = &(ptr->Index); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfCellData_Index(){ return sizeof(int); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfColliderData_Size(){
            var tempObj =  new ColliderData(); ColliderData* ptr = &tempObj; var filedPtr = &(ptr->Size); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfColliderData_Size(){ return sizeof(LVector2); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfColliderData_Radius(){
            var tempObj =  new ColliderData(); ColliderData* ptr = &tempObj; var filedPtr = &(ptr->Radius); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfColliderData_Radius(){ return sizeof(LFloat); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfUnitData_Camp(){
            var tempObj =  new UnitData(); UnitData* ptr = &tempObj; var filedPtr = &(ptr->Camp); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfUnitData_Camp(){ return sizeof(ECampType); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfUnitData_Health(){
            var tempObj =  new UnitData(); UnitData* ptr = &tempObj; var filedPtr = &(ptr->Health); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfUnitData_Health(){ return sizeof(int); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfUnitData_Damage(){
            var tempObj =  new UnitData(); UnitData* ptr = &tempObj; var filedPtr = &(ptr->Damage); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfUnitData_Damage(){ return sizeof(int); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfUnitData_Timer(){
            var tempObj =  new UnitData(); UnitData* ptr = &tempObj; var filedPtr = &(ptr->Timer); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfUnitData_Timer(){ return sizeof(LFloat); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfUnitData_KillerLocalId(){
            var tempObj =  new UnitData(); UnitData* ptr = &tempObj; var filedPtr = &(ptr->KillerLocalId); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfUnitData_KillerLocalId(){ return sizeof(uint); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfMoveData_MoveSpd(){
            var tempObj =  new MoveData(); MoveData* ptr = &tempObj; var filedPtr = &(ptr->MoveSpd); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfMoveData_MoveSpd(){ return sizeof(LFloat); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfMoveData_MaxMoveSpd(){
            var tempObj =  new MoveData(); MoveData* ptr = &tempObj; var filedPtr = &(ptr->MaxMoveSpd); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfMoveData_MaxMoveSpd(){ return sizeof(LFloat); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfMoveData_IsChangedDir(){
            var tempObj =  new MoveData(); MoveData* ptr = &tempObj; var filedPtr = &(ptr->IsChangedDir); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfMoveData_IsChangedDir(){ return sizeof(bool); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfAiData_Timer(){
            var tempObj =  new AiData(); AiData* ptr = &tempObj; var filedPtr = &(ptr->Timer); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfAiData_Timer(){ return sizeof(LFloat); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfAiData_UpdateInterval(){
            var tempObj =  new AiData(); AiData* ptr = &tempObj; var filedPtr = &(ptr->UpdateInterval); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfAiData_UpdateInterval(){ return sizeof(LFloat); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfAiData_FireRate(){
            var tempObj =  new AiData(); AiData* ptr = &tempObj; var filedPtr = &(ptr->FireRate); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfAiData_FireRate(){ return sizeof(LFloat); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSkillData_CD(){
            var tempObj =  new SkillData(); SkillData* ptr = &tempObj; var filedPtr = &(ptr->CD); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfSkillData_CD(){ return sizeof(LFloat); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSkillData_CdTimer(){
            var tempObj =  new SkillData(); SkillData* ptr = &tempObj; var filedPtr = &(ptr->CdTimer); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfSkillData_CdTimer(){ return sizeof(LFloat); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSkillData_BulletId(){
            var tempObj =  new SkillData(); SkillData* ptr = &tempObj; var filedPtr = &(ptr->BulletId); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfSkillData_BulletId(){ return sizeof(int); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfSkillData_IsNeedFire(){
            var tempObj =  new SkillData(); SkillData* ptr = &tempObj; var filedPtr = &(ptr->IsNeedFire); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfSkillData_IsNeedFire(){ return sizeof(bool); }
 
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBulletData_CanDestroyIron(){
            var tempObj =  new BulletData(); BulletData* ptr = &tempObj; var filedPtr = &(ptr->CanDestroyIron); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfBulletData_CanDestroyIron(){ return sizeof(bool); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBulletData_CanDestroyGrass(){
            var tempObj =  new BulletData(); BulletData* ptr = &tempObj; var filedPtr = &(ptr->CanDestroyGrass); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfBulletData_CanDestroyGrass(){ return sizeof(bool); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetOffsetOfBulletData_OwnerLocalId(){
            var tempObj =  new BulletData(); BulletData* ptr = &tempObj; var filedPtr = &(ptr->OwnerLocalId); 
            return (int)((long) filedPtr - (long) ptr);        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] internal int GetSizeOfBulletData_OwnerLocalId(){ return sizeof(uint); }
 
       
//#endregion


        public int CurTotalEntityCount =>
            0 
            + CurBoidSpawnerCount
            + CurBoidCellCount
            + CurBoidCount
            + CurBoidTargetCount
            + CurBoidObstacleCount
            + CurItemCount
            + CurCampCount
            + CurPlayerCount
            + CurEnemyCount
            + CurBulletCount
            + CurSpawnerCount
            ;


        public int CurBoidSpawnerCount => _BoidSpawnerAry.CurEntityCount;
        public int MaxBoidSpawnerIndex => _BoidSpawnerAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidSpawner* GetBoidSpawner(int index) { return _BoidSpawnerAry.GetEntity(index); }
        public int CurBoidCellCount => _BoidCellAry.CurEntityCount;
        public int MaxBoidCellIndex => _BoidCellAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidCell* GetBoidCell(int index) { return _BoidCellAry.GetEntity(index); }
        public int CurBoidCount => _BoidAry.CurEntityCount;
        public int MaxBoidIndex => _BoidAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Boid* GetBoid(int index) { return _BoidAry.GetEntity(index); }
        public int CurBoidTargetCount => _BoidTargetAry.CurEntityCount;
        public int MaxBoidTargetIndex => _BoidTargetAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidTarget* GetBoidTarget(int index) { return _BoidTargetAry.GetEntity(index); }
        public int CurBoidObstacleCount => _BoidObstacleAry.CurEntityCount;
        public int MaxBoidObstacleIndex => _BoidObstacleAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe BoidObstacle* GetBoidObstacle(int index) { return _BoidObstacleAry.GetEntity(index); }
        public int CurItemCount => _ItemAry.CurEntityCount;
        public int MaxItemIndex => _ItemAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Item* GetItem(int index) { return _ItemAry.GetEntity(index); }
        public int CurCampCount => _CampAry.CurEntityCount;
        public int MaxCampIndex => _CampAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Camp* GetCamp(int index) { return _CampAry.GetEntity(index); }
        public int CurPlayerCount => _PlayerAry.CurEntityCount;
        public int MaxPlayerIndex => _PlayerAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Player* GetPlayer(int index) { return _PlayerAry.GetEntity(index); }
        public int CurEnemyCount => _EnemyAry.CurEntityCount;
        public int MaxEnemyIndex => _EnemyAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Enemy* GetEnemy(int index) { return _EnemyAry.GetEntity(index); }
        public int CurBulletCount => _BulletAry.CurEntityCount;
        public int MaxBulletIndex => _BulletAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Bullet* GetBullet(int index) { return _BulletAry.GetEntity(index); }
        public int CurSpawnerCount => _SpawnerAry.CurEntityCount;
        public int MaxSpawnerIndex => _SpawnerAry.Length - 1;
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public unsafe Spawner* GetSpawner(int index) { return _SpawnerAry.GetEntity(index); }
 
    }                                                                                
#endif                                                                                           
}                                                                                               