
//------------------------------------------------------------------------------    
// <auto-generated>                                                                 
//     This code was generated by Tools.MacroExpansion, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null. 
//     https://github.com/JiepengTan/LockstepEngine                                          
//     Changes to this file may cause incorrect behavior and will be lost if        
//     the code is regenerated.                                                     
// </auto-generated>                                                                
//------------------------------------------------------------------------------  

//Power by ME //src: https://github.com/JiepengTan/ME  

//#define DONT_USE_GENERATE_CODE                                                                 
                                                                                                 
using System.Linq;                                                                               
using Lockstep.Serialization;                                                                    
using System.Runtime.InteropServices;                                                            
using System.Runtime.CompilerServices;                                                            
using System;                                                                                    
using Lockstep.InternalUnsafeECS;                                                               
using System.Collections;                                                                        
using Lockstep.Math;                                                                             
using System.Collections.Generic;                                                                
using Lockstep.Logging;                                                                          
using Lockstep.Util;                                                                          
namespace Lockstep.UnsafeECS.Game {                                                              
#if !DONT_USE_GENERATE_CODE                                                                      
    public unsafe partial class Context {
        private static void ScheduleMoveSystem(BaseContext context, ISystem sys){
#if UNING_UNITY_BURST_JOB
            Unity.Jobs.IJobExtensions.Schedule(( (Lockstep.UnsafeECS.Game.MoveSystem) sys).JobData).Complete();
#else
            ((Lockstep.UnsafeECS.Game.MoveSystem) sys).JobData.Execute();
#endif
        }
        private static void ScheduleMoveForwardSystem(BaseContext context, ISystem sys){
#if UNING_UNITY_BURST_JOB
            Unity.Jobs.IJobExtensions.Schedule(( (Lockstep.UnsafeECS.Game.MoveForwardSystem) sys).JobData).Complete();
#else
            ((Lockstep.UnsafeECS.Game.MoveForwardSystem) sys).JobData.Execute();
#endif
        }
        private static void ScheduleTimerSystem(BaseContext context, ISystem sys){
#if UNING_UNITY_BURST_JOB
            Unity.Jobs.IJobExtensions.Schedule(( (Lockstep.UnsafeECS.Game.TimerSystem) sys).JobData).Complete();
#else
            ((Lockstep.UnsafeECS.Game.TimerSystem) sys).JobData.Execute();
#endif
        }
        private static void ScheduleBoidCopyStateSystem(BaseContext context, ISystem sys){
#if UNING_UNITY_BURST_JOB
            Unity.Jobs.IJobExtensions.Schedule(( (Lockstep.UnsafeECS.Game.BoidCopyStateSystem) sys).JobData).Complete();
#else
            ((Lockstep.UnsafeECS.Game.BoidCopyStateSystem) sys).JobData.Execute();
#endif
        }
        private static void ScheduleBoidHashPosSystem(BaseContext context, ISystem sys){
#if UNING_UNITY_BURST_JOB
            Unity.Jobs.IJobExtensions.Schedule(( (Lockstep.UnsafeECS.Game.BoidHashPosSystem) sys).JobData).Complete();
#else
            ((Lockstep.UnsafeECS.Game.BoidHashPosSystem) sys).JobData.Execute();
#endif
        }
        private static void ScheduleBoidSteerSystem(BaseContext context, ISystem sys){
#if UNING_UNITY_BURST_JOB
            Unity.Jobs.IJobExtensions.Schedule(( (Lockstep.UnsafeECS.Game.BoidSteerSystem) sys).JobData).Complete();
#else
            ((Lockstep.UnsafeECS.Game.BoidSteerSystem) sys).JobData.Execute();
#endif
        }
 
        private static void ScheduleBoidMergeSystem(BaseContext context, ISystem sys){
            var system = (Lockstep.UnsafeECS.Game.BoidMergeSystem) sys;
            Unity.Collections.JobNativeMultiHashMapUniqueHashExtensions.Schedule(system.JobData, system.HashMap, system.InnerLoopBatchCount).Complete();
        }
 
        
        private static void ScheduleCreateDestroySystem(BaseContext context, ISystem sys){
            var system = (Lockstep.UnsafeECS.Game.CreateDestroySystem) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._PlayerAry.GetEntity(0);
                var len = entities._PlayerAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->Unit, ref ptr->Transform2D);
                        idx++;
                    }
                }
            }
            {
                var ptr = entities._EnemyAry.GetEntity(0);
                var len = entities._EnemyAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->Unit, ref ptr->Transform2D);
                        idx++;
                    }
                }
            }
            {
                var ptr = entities._BulletAry.GetEntity(0);
                var len = entities._BulletAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->Unit, ref ptr->Transform2D);
                        idx++;
                    }
                }
            }
  
        }
        private static void ScheduleBoidSpawnerSystem(BaseContext context, ISystem sys){
            var system = (Lockstep.UnsafeECS.Game.BoidSpawnerSystem) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._BoidSpawnerAry.GetEntity(0);
                var len = entities._BoidSpawnerAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->SpawnerData, ref ptr->AssetData);
                        idx++;
                    }
                }
            }
  
        }
        private static void ScheduleBoidViewTransformUpdateSystem(BaseContext context, ISystem sys){
            var system = (Lockstep.UnsafeECS.Game.BoidViewTransformUpdateSystem) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._BoidTargetAry.GetEntity(0);
                var len = entities._BoidTargetAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->ViewData, ref ptr->PositionData);
                        idx++;
                    }
                }
            }
            {
                var ptr = entities._BoidObstacleAry.GetEntity(0);
                var len = entities._BoidObstacleAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->ViewData, ref ptr->PositionData);
                        idx++;
                    }
                }
            }
  
        }
        private static void ScheduleBoidTargetMoveSystem(BaseContext context, ISystem sys){
            var system = (Lockstep.UnsafeECS.Game.BoidTargetMoveSystem) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._BoidTargetAry.GetEntity(0);
                var len = entities._BoidTargetAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->PositionData);
                        idx++;
                    }
                }
            }
            {
                var ptr = entities._BoidObstacleAry.GetEntity(0);
                var len = entities._BoidObstacleAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->PositionData);
                        idx++;
                    }
                }
            }
  
        }
        private static void ScheduleBoidCreateDestroySystem(BaseContext context, ISystem sys){
            var system = (Lockstep.UnsafeECS.Game.BoidCreateDestroySystem) sys;
            var entities = ((Context)context)._entities;
            {
                var ptr = entities._BoidAry.GetEntity(0);
                var len = entities._BoidAry.Length;
                for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                    if (ptr->_entity._active) {
                        system.Execute((Entity*)ptr, ref ptr->LocalToWorld);
                        idx++;
                    }
                }
            }
  
        }
 
    }


    public unsafe partial class MoveSystem :IJobDataSystem{
        public JobDefine JobData;

        [StructLayoutAttribute(LayoutKind.Sequential)]
        [Unity.Burst.BurstCompile]
        public unsafe partial struct JobDefine : Unity.Jobs.IJob{
            public NativeArray<Player> _PlayerAry;
            public NativeArray<Enemy> _EnemyAry;
            public NativeArray<Bullet> _BulletAry;
  
            public void Execute(){
                {
                    var ptr = _PlayerAry.GetPointer(0);
                    var len = _PlayerAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(ref ptr->Transform2D);
                            idx++;
                        }
                    }
                }
                {
                    var ptr = _EnemyAry.GetPointer(0);
                    var len = _EnemyAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(ref ptr->Transform2D);
                            idx++;
                        }
                    }
                }
                {
                    var ptr = _BulletAry.GetPointer(0);
                    var len = _BulletAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(ref ptr->Transform2D);
                            idx++;
                        }
                    }
                }
  
            }
        }

        protected override void CodeGen_PrepareJobData(IContext ctx){ 
            var entities = (ctx as Context)._entities;
            JobData._PlayerAry = entities._PlayerAry._EntityAry;
            JobData._EnemyAry = entities._EnemyAry._EntityAry;
            JobData._BulletAry = entities._BulletAry._EntityAry;
  
        }
    }
    public unsafe partial class MoveForwardSystem :IJobDataSystem{
        public JobDefine JobData;

        [StructLayoutAttribute(LayoutKind.Sequential)]
        [Unity.Burst.BurstCompile]
        public unsafe partial struct JobDefine : Unity.Jobs.IJob{
            public NativeArray<Player> _PlayerAry;
            public NativeArray<Enemy> _EnemyAry;
            public NativeArray<Bullet> _BulletAry;
  
            public void Execute(){
                {
                    var ptr = _PlayerAry.GetPointer(0);
                    var len = _PlayerAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(ref ptr->Transform2D);
                            idx++;
                        }
                    }
                }
                {
                    var ptr = _EnemyAry.GetPointer(0);
                    var len = _EnemyAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(ref ptr->Transform2D);
                            idx++;
                        }
                    }
                }
                {
                    var ptr = _BulletAry.GetPointer(0);
                    var len = _BulletAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(ref ptr->Transform2D);
                            idx++;
                        }
                    }
                }
  
            }
        }

        protected override void CodeGen_PrepareJobData(IContext ctx){ 
            var entities = (ctx as Context)._entities;
            JobData._PlayerAry = entities._PlayerAry._EntityAry;
            JobData._EnemyAry = entities._EnemyAry._EntityAry;
            JobData._BulletAry = entities._BulletAry._EntityAry;
  
        }
    }
    public unsafe partial class TimerSystem :IJobDataSystem{
        public JobDefine JobData;

        [StructLayoutAttribute(LayoutKind.Sequential)]
        [Unity.Burst.BurstCompile]
        public unsafe partial struct JobDefine : Unity.Jobs.IJob{
            public NativeArray<Camp> _CampAry;
            public NativeArray<Player> _PlayerAry;
            public NativeArray<Enemy> _EnemyAry;
            public NativeArray<Bullet> _BulletAry;
  
            public void Execute(){
                {
                    var ptr = _CampAry.GetPointer(0);
                    var len = _CampAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(ref ptr->Unit);
                            idx++;
                        }
                    }
                }
                {
                    var ptr = _PlayerAry.GetPointer(0);
                    var len = _PlayerAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(ref ptr->Unit);
                            idx++;
                        }
                    }
                }
                {
                    var ptr = _EnemyAry.GetPointer(0);
                    var len = _EnemyAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(ref ptr->Unit);
                            idx++;
                        }
                    }
                }
                {
                    var ptr = _BulletAry.GetPointer(0);
                    var len = _BulletAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(ref ptr->Unit);
                            idx++;
                        }
                    }
                }
  
            }
        }

        protected override void CodeGen_PrepareJobData(IContext ctx){ 
            var entities = (ctx as Context)._entities;
            JobData._CampAry = entities._CampAry._EntityAry;
            JobData._PlayerAry = entities._PlayerAry._EntityAry;
            JobData._EnemyAry = entities._EnemyAry._EntityAry;
            JobData._BulletAry = entities._BulletAry._EntityAry;
  
        }
    }
    public unsafe partial class BoidCopyStateSystem :IJobDataSystem{
        public JobDefine JobData;

        [StructLayoutAttribute(LayoutKind.Sequential)]
        [Unity.Burst.BurstCompile]
        public unsafe partial struct JobDefine : Unity.Jobs.IJob{
            public NativeArray<Boid> _BoidAry;
  
            public void Execute(){
                {
                    var ptr = _BoidAry.GetPointer(0);
                    var len = _BoidAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(idx, ref ptr->LocalToWorld);
                            idx++;
                        }
                    }
                }
  
            }
        }

        protected override void CodeGen_PrepareJobData(IContext ctx){ 
            var entities = (ctx as Context)._entities;
            JobData._BoidAry = entities._BoidAry._EntityAry;
  
        }
    }
    public unsafe partial class BoidHashPosSystem :IJobDataSystem{
        public JobDefine JobData;

        [StructLayoutAttribute(LayoutKind.Sequential)]
        [Unity.Burst.BurstCompile]
        public unsafe partial struct JobDefine : Unity.Jobs.IJob{
            public NativeArray<Boid> _BoidAry;
  
            public void Execute(){
                {
                    var ptr = _BoidAry.GetPointer(0);
                    var len = _BoidAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(idx, ref ptr->LocalToWorld);
                            idx++;
                        }
                    }
                }
  
            }
        }

        protected override void CodeGen_PrepareJobData(IContext ctx){ 
            var entities = (ctx as Context)._entities;
            JobData._BoidAry = entities._BoidAry._EntityAry;
  
        }
    }
    public unsafe partial class BoidSteerSystem :IJobDataSystem{
        public JobDefine JobData;

        [StructLayoutAttribute(LayoutKind.Sequential)]
        [Unity.Burst.BurstCompile]
        public unsafe partial struct JobDefine : Unity.Jobs.IJob{
            public NativeArray<Boid> _BoidAry;
  
            public void Execute(){
                {
                    var ptr = _BoidAry.GetPointer(0);
                    var len = _BoidAry.Length;
                    for (int i = 0,idx = 0; i < len; i++, ++ptr ) {
                        if (ptr->_entity._active) {
                            Execute(idx, ref ptr->LocalToWorld);
                            idx++;
                        }
                    }
                }
  
            }
        }

        protected override void CodeGen_PrepareJobData(IContext ctx){ 
            var entities = (ctx as Context)._entities;
            JobData._BoidAry = entities._BoidAry._EntityAry;
  
        }
    }
 


    public unsafe partial class BoidMergeSystem :IJobDataSystem{
        public JobDefine JobData;
        public Unity.Collections.NativeMultiHashMap<int, int> HashMap;
        [StructLayoutAttribute(LayoutKind.Sequential)]
        [Unity.Burst.BurstCompile]
        public unsafe partial struct JobDefine : Unity.Collections.IJobNativeMultiHashMapMergedSharedKeyIndices{
        }
    }
 
                                                                                
#endif                                                                                           
}                                                                                               